# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_util')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_util')
    _util = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_util', [dirname(__file__)])
        except ImportError:
            import _util
            return _util
        try:
            _mod = imp.load_module('_util', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _util = swig_import_helper()
    del swig_import_helper
else:
    import _util
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def log_init(level):
    return _util.log_init(level)
log_init = _util.log_init

def log_get_level():
    return _util.log_get_level()
log_get_level = _util.log_get_level

def log_set_level(lvl):
    return _util.log_set_level(lvl)
log_set_level = _util.log_set_level
class coadd_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coadd_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coadd_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["img"] = _util.coadd_t_img_set
    __swig_getmethods__["img"] = _util.coadd_t_img_get
    if _newclass:
        img = _swig_property(_util.coadd_t_img_get, _util.coadd_t_img_set)
    __swig_setmethods__["weight"] = _util.coadd_t_weight_set
    __swig_getmethods__["weight"] = _util.coadd_t_weight_get
    if _newclass:
        weight = _swig_property(_util.coadd_t_weight_get, _util.coadd_t_weight_set)
    __swig_setmethods__["W"] = _util.coadd_t_W_set
    __swig_getmethods__["W"] = _util.coadd_t_W_get
    if _newclass:
        W = _swig_property(_util.coadd_t_W_get, _util.coadd_t_W_set)
    __swig_setmethods__["H"] = _util.coadd_t_H_set
    __swig_getmethods__["H"] = _util.coadd_t_H_get
    if _newclass:
        H = _swig_property(_util.coadd_t_H_get, _util.coadd_t_H_set)
    __swig_setmethods__["wcs"] = _util.coadd_t_wcs_set
    __swig_getmethods__["wcs"] = _util.coadd_t_wcs_get
    if _newclass:
        wcs = _swig_property(_util.coadd_t_wcs_get, _util.coadd_t_wcs_set)
    __swig_setmethods__["resample_func"] = _util.coadd_t_resample_func_set
    __swig_getmethods__["resample_func"] = _util.coadd_t_resample_func_get
    if _newclass:
        resample_func = _swig_property(_util.coadd_t_resample_func_get, _util.coadd_t_resample_func_set)
    __swig_setmethods__["resample_token"] = _util.coadd_t_resample_token_set
    __swig_getmethods__["resample_token"] = _util.coadd_t_resample_token_get
    if _newclass:
        resample_token = _swig_property(_util.coadd_t_resample_token_get, _util.coadd_t_resample_token_set)

    def __init__(self):
        this = _util.new_coadd_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_coadd_t
    __del__ = lambda self: None
coadd_t_swigregister = _util.coadd_t_swigregister
coadd_t_swigregister(coadd_t)


def coadd_new(W, H):
    return _util.coadd_new(W, H)
coadd_new = _util.coadd_new

def coadd_new_from_wcs(wcs):
    return _util.coadd_new_from_wcs(wcs)
coadd_new_from_wcs = _util.coadd_new_from_wcs

def coadd_set_lanczos(co, Lorder):
    return _util.coadd_set_lanczos(co, Lorder)
coadd_set_lanczos = _util.coadd_set_lanczos

def coadd_add_image(c, img, weightimg, weight, wcs):
    return _util.coadd_add_image(c, img, weightimg, weight, wcs)
coadd_add_image = _util.coadd_add_image

def coadd_divide_by_weight(c, badpix):
    return _util.coadd_divide_by_weight(c, badpix)
coadd_divide_by_weight = _util.coadd_divide_by_weight

def coadd_get_snapshot(c, outimg, badpix):
    return _util.coadd_get_snapshot(c, outimg, badpix)
coadd_get_snapshot = _util.coadd_get_snapshot

def coadd_free(c):
    return _util.coadd_free(c)
coadd_free = _util.coadd_free

def coadd_debug(co):
    return _util.coadd_debug(co)
coadd_debug = _util.coadd_debug

def coadd_create_weight_image_from_range(img, W, H, lowval, highval):
    return _util.coadd_create_weight_image_from_range(img, W, H, lowval, highval)
coadd_create_weight_image_from_range = _util.coadd_create_weight_image_from_range

def coadd_weight_image_mask_value(img, W, H, weight, badval):
    return _util.coadd_weight_image_mask_value(img, W, H, weight, badval)
coadd_weight_image_mask_value = _util.coadd_weight_image_mask_value
class lanczos_args_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lanczos_args_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lanczos_args_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["order"] = _util.lanczos_args_t_order_set
    __swig_getmethods__["order"] = _util.lanczos_args_t_order_get
    if _newclass:
        order = _swig_property(_util.lanczos_args_t_order_get, _util.lanczos_args_t_order_set)
    __swig_setmethods__["weighted"] = _util.lanczos_args_t_weighted_set
    __swig_getmethods__["weighted"] = _util.lanczos_args_t_weighted_get
    if _newclass:
        weighted = _swig_property(_util.lanczos_args_t_weighted_get, _util.lanczos_args_t_weighted_set)

    def __init__(self):
        this = _util.new_lanczos_args_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_lanczos_args_t
    __del__ = lambda self: None
lanczos_args_t_swigregister = _util.lanczos_args_t_swigregister
lanczos_args_t_swigregister(lanczos_args_t)


def lanczos(x, order):
    return _util.lanczos(x, order)
lanczos = _util.lanczos

def nearest_resample_f(px, py, img, weightimg, W, H, out_wt, token):
    return _util.nearest_resample_f(px, py, img, weightimg, W, H, out_wt, token)
nearest_resample_f = _util.nearest_resample_f

def lanczos_resample_f(px, py, img, weightimg, W, H, out_wt, token):
    return _util.lanczos_resample_f(px, py, img, weightimg, W, H, out_wt, token)
lanczos_resample_f = _util.lanczos_resample_f

def lanczos_resample_unw_sep_f(px, py, img, W, H, token):
    return _util.lanczos_resample_unw_sep_f(px, py, img, W, H, token)
lanczos_resample_unw_sep_f = _util.lanczos_resample_unw_sep_f

def nearest_resample_d(px, py, img, weightimg, W, H, out_wt, token):
    return _util.nearest_resample_d(px, py, img, weightimg, W, H, out_wt, token)
nearest_resample_d = _util.nearest_resample_d

def lanczos_resample_d(px, py, img, weightimg, W, H, out_wt, token):
    return _util.lanczos_resample_d(px, py, img, weightimg, W, H, out_wt, token)
lanczos_resample_d = _util.lanczos_resample_d
TRUE = _util.TRUE
FALSE = _util.FALSE

def fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout):
    return _util.fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout)
fit_sip_coefficients = _util.fit_sip_coefficients

def wcs_shift(wcs, xs, ys):
    return _util.wcs_shift(wcs, xs, ys)
wcs_shift = _util.wcs_shift

def fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout):
    return _util.fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout)
fit_sip_wcs = _util.fit_sip_wcs

def fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, crpix, doshift, sipout):
    return _util.fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, crpix, doshift, sipout)
fit_sip_wcs_2 = _util.fit_sip_wcs_2

def fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout):
    return _util.fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout)
fit_tan_wcs_move_tangent_point = _util.fit_tan_wcs_move_tangent_point

def fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout):
    return _util.fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout)
fit_tan_wcs_move_tangent_point_weighted = _util.fit_tan_wcs_move_tangent_point_weighted

def fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan, p_scale):
    return _util.fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan, p_scale)
fit_tan_wcs = _util.fit_tan_wcs

def fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan, p_scale):
    return _util.fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan, p_scale)
fit_tan_wcs_weighted = _util.fit_tan_wcs_weighted

def print_array(arr):
    return _util.print_array(arr)
print_array = _util.print_array

def an_hist2d(py_arrx, py_arry, py_hist, xlo, xhi, ylo, yhi):
    return _util.an_hist2d(py_arrx, py_arry, py_hist, xlo, xhi, ylo, yhi)
an_hist2d = _util.an_hist2d

def flat_percentile_f(np_arr, pct):
    return _util.flat_percentile_f(np_arr, pct)
flat_percentile_f = _util.flat_percentile_f

def flat_median_f(np_arr):
    return _util.flat_median_f(np_arr)
flat_median_f = _util.flat_median_f

def median_smooth(py_image, py_mask, halfbox, py_smooth):
    return _util.median_smooth(py_image, py_mask, halfbox, py_smooth)
median_smooth = _util.median_smooth
L = _util.L

def lanczos5_interpolate(np_ixi, np_iyi, np_dx, np_dy, loutputs, linputs):
    return _util.lanczos5_interpolate(np_ixi, np_iyi, np_dx, np_dy, loutputs, linputs)
lanczos5_interpolate = _util.lanczos5_interpolate

def lanczos3_interpolate(np_ixi, np_iyi, np_dx, np_dy, loutputs, linputs):
    return _util.lanczos3_interpolate(np_ixi, np_iyi, np_dx, np_dy, loutputs, linputs)
lanczos3_interpolate = _util.lanczos3_interpolate

def lanczos5_filter(py_dx, py_f):
    return _util.lanczos5_filter(py_dx, py_f)
lanczos5_filter = _util.lanczos5_filter

def lanczos3_filter(py_dx, py_f):
    return _util.lanczos3_filter(py_dx, py_f)
lanczos3_filter = _util.lanczos3_filter

def lanczos3_filter_table(py_dx, py_f, rangecheck):
    return _util.lanczos3_filter_table(py_dx, py_f, rangecheck)
lanczos3_filter_table = _util.lanczos3_filter_table

def lanczos_shift_image_c(py_img, py_weight, py_outimg, py_outweight, order, dx, dy):
    return _util.lanczos_shift_image_c(py_img, py_weight, py_outimg, py_outweight, order, dx, dy)
lanczos_shift_image_c = _util.lanczos_shift_image_c


def lanczos_shift_image(img, dx, dy, order=3, weight=None,
                        outimg=None, outweight=None):
    img = img.astype(float)
    if weight is not None:
        weight = weight.astype(float)
        assert(img.shape == weight.shape)
    if outimg is None:
        outimg = np.zeros_like(img)
    if outweight is not None:
        assert(outweight.shape == img.shape)

# print 'outweight:', outweight

    lanczos_shift_image_c(img, weight, outimg, outweight, order, dx, dy)
    if outweight is None:
        return outimg
    return outimg,outweight

DEFAULT_INDEX_JITTER = _util.DEFAULT_INDEX_JITTER
class index_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, index_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codekd"] = _util.index_t_codekd_set
    __swig_getmethods__["codekd"] = _util.index_t_codekd_get
    if _newclass:
        codekd = _swig_property(_util.index_t_codekd_get, _util.index_t_codekd_set)
    __swig_setmethods__["quads"] = _util.index_t_quads_set
    __swig_getmethods__["quads"] = _util.index_t_quads_get
    if _newclass:
        quads = _swig_property(_util.index_t_quads_get, _util.index_t_quads_set)
    __swig_setmethods__["starkd"] = _util.index_t_starkd_set
    __swig_getmethods__["starkd"] = _util.index_t_starkd_get
    if _newclass:
        starkd = _swig_property(_util.index_t_starkd_get, _util.index_t_starkd_set)
    __swig_setmethods__["fits"] = _util.index_t_fits_set
    __swig_getmethods__["fits"] = _util.index_t_fits_get
    if _newclass:
        fits = _swig_property(_util.index_t_fits_get, _util.index_t_fits_set)
    __swig_setmethods__["codefn"] = _util.index_t_codefn_set
    __swig_getmethods__["codefn"] = _util.index_t_codefn_get
    if _newclass:
        codefn = _swig_property(_util.index_t_codefn_get, _util.index_t_codefn_set)
    __swig_setmethods__["quadfn"] = _util.index_t_quadfn_set
    __swig_getmethods__["quadfn"] = _util.index_t_quadfn_get
    if _newclass:
        quadfn = _swig_property(_util.index_t_quadfn_get, _util.index_t_quadfn_set)
    __swig_setmethods__["starfn"] = _util.index_t_starfn_set
    __swig_getmethods__["starfn"] = _util.index_t_starfn_get
    if _newclass:
        starfn = _swig_property(_util.index_t_starfn_get, _util.index_t_starfn_set)
    __swig_setmethods__["indexname"] = _util.index_t_indexname_set
    __swig_getmethods__["indexname"] = _util.index_t_indexname_get
    if _newclass:
        indexname = _swig_property(_util.index_t_indexname_get, _util.index_t_indexname_set)
    __swig_setmethods__["indexid"] = _util.index_t_indexid_set
    __swig_getmethods__["indexid"] = _util.index_t_indexid_get
    if _newclass:
        indexid = _swig_property(_util.index_t_indexid_get, _util.index_t_indexid_set)
    __swig_setmethods__["healpix"] = _util.index_t_healpix_set
    __swig_getmethods__["healpix"] = _util.index_t_healpix_get
    if _newclass:
        healpix = _swig_property(_util.index_t_healpix_get, _util.index_t_healpix_set)
    __swig_setmethods__["hpnside"] = _util.index_t_hpnside_set
    __swig_getmethods__["hpnside"] = _util.index_t_hpnside_get
    if _newclass:
        hpnside = _swig_property(_util.index_t_hpnside_get, _util.index_t_hpnside_set)
    __swig_setmethods__["index_jitter"] = _util.index_t_index_jitter_set
    __swig_getmethods__["index_jitter"] = _util.index_t_index_jitter_get
    if _newclass:
        index_jitter = _swig_property(_util.index_t_index_jitter_get, _util.index_t_index_jitter_set)
    __swig_setmethods__["cutnside"] = _util.index_t_cutnside_set
    __swig_getmethods__["cutnside"] = _util.index_t_cutnside_get
    if _newclass:
        cutnside = _swig_property(_util.index_t_cutnside_get, _util.index_t_cutnside_set)
    __swig_setmethods__["cutnsweep"] = _util.index_t_cutnsweep_set
    __swig_getmethods__["cutnsweep"] = _util.index_t_cutnsweep_get
    if _newclass:
        cutnsweep = _swig_property(_util.index_t_cutnsweep_get, _util.index_t_cutnsweep_set)
    __swig_setmethods__["cutdedup"] = _util.index_t_cutdedup_set
    __swig_getmethods__["cutdedup"] = _util.index_t_cutdedup_get
    if _newclass:
        cutdedup = _swig_property(_util.index_t_cutdedup_get, _util.index_t_cutdedup_set)
    __swig_setmethods__["cutband"] = _util.index_t_cutband_set
    __swig_getmethods__["cutband"] = _util.index_t_cutband_get
    if _newclass:
        cutband = _swig_property(_util.index_t_cutband_get, _util.index_t_cutband_set)
    __swig_setmethods__["cutmargin"] = _util.index_t_cutmargin_set
    __swig_getmethods__["cutmargin"] = _util.index_t_cutmargin_get
    if _newclass:
        cutmargin = _swig_property(_util.index_t_cutmargin_get, _util.index_t_cutmargin_set)
    __swig_setmethods__["circle"] = _util.index_t_circle_set
    __swig_getmethods__["circle"] = _util.index_t_circle_get
    if _newclass:
        circle = _swig_property(_util.index_t_circle_get, _util.index_t_circle_set)
    __swig_setmethods__["cx_less_than_dx"] = _util.index_t_cx_less_than_dx_set
    __swig_getmethods__["cx_less_than_dx"] = _util.index_t_cx_less_than_dx_get
    if _newclass:
        cx_less_than_dx = _swig_property(_util.index_t_cx_less_than_dx_get, _util.index_t_cx_less_than_dx_set)
    __swig_setmethods__["meanx_less_than_half"] = _util.index_t_meanx_less_than_half_set
    __swig_getmethods__["meanx_less_than_half"] = _util.index_t_meanx_less_than_half_get
    if _newclass:
        meanx_less_than_half = _swig_property(_util.index_t_meanx_less_than_half_get, _util.index_t_meanx_less_than_half_set)
    __swig_setmethods__["index_scale_upper"] = _util.index_t_index_scale_upper_set
    __swig_getmethods__["index_scale_upper"] = _util.index_t_index_scale_upper_get
    if _newclass:
        index_scale_upper = _swig_property(_util.index_t_index_scale_upper_get, _util.index_t_index_scale_upper_set)
    __swig_setmethods__["index_scale_lower"] = _util.index_t_index_scale_lower_set
    __swig_getmethods__["index_scale_lower"] = _util.index_t_index_scale_lower_get
    if _newclass:
        index_scale_lower = _swig_property(_util.index_t_index_scale_lower_get, _util.index_t_index_scale_lower_set)
    __swig_setmethods__["dimquads"] = _util.index_t_dimquads_set
    __swig_getmethods__["dimquads"] = _util.index_t_dimquads_get
    if _newclass:
        dimquads = _swig_property(_util.index_t_dimquads_get, _util.index_t_dimquads_set)
    __swig_setmethods__["nstars"] = _util.index_t_nstars_set
    __swig_getmethods__["nstars"] = _util.index_t_nstars_get
    if _newclass:
        nstars = _swig_property(_util.index_t_nstars_get, _util.index_t_nstars_set)
    __swig_setmethods__["nquads"] = _util.index_t_nquads_set
    __swig_getmethods__["nquads"] = _util.index_t_nquads_get
    if _newclass:
        nquads = _swig_property(_util.index_t_nquads_get, _util.index_t_nquads_set)

    def __init__(self):
        this = _util.new_index_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_index_t
    __del__ = lambda self: None
index_t_swigregister = _util.index_t_swigregister
index_t_swigregister(index_t)


def index_dimquads(indx):
    return _util.index_dimquads(indx)
index_dimquads = _util.index_dimquads

def index_overlaps_scale_range(indx, quadlo, quadhi):
    return _util.index_overlaps_scale_range(indx, quadlo, quadhi)
index_overlaps_scale_range = _util.index_overlaps_scale_range

def index_is_within_range(indx, ra, dec, radius_deg):
    return _util.index_is_within_range(indx, ra, dec, radius_deg)
index_is_within_range = _util.index_is_within_range

def index_get_meta(filename, indx):
    return _util.index_get_meta(filename, indx)
index_get_meta = _util.index_get_meta

def index_is_file_index(filename):
    return _util.index_is_file_index(filename)
index_is_file_index = _util.index_is_file_index

def index_get_quad_filename(indexname):
    return _util.index_get_quad_filename(indexname)
index_get_quad_filename = _util.index_get_quad_filename

def index_get_qidx_filename(indexname):
    return _util.index_get_qidx_filename(indexname)
index_get_qidx_filename = _util.index_get_qidx_filename
INDEX_ONLY_LOAD_METADATA = _util.INDEX_ONLY_LOAD_METADATA

def index_get_quad_dim(index):
    return _util.index_get_quad_dim(index)
index_get_quad_dim = _util.index_get_quad_dim

def index_get_code_dim(index):
    return _util.index_get_code_dim(index)
index_get_code_dim = _util.index_get_code_dim

def index_nquads(index):
    return _util.index_nquads(index)
index_nquads = _util.index_nquads

def index_nstars(index):
    return _util.index_nstars(index)
index_nstars = _util.index_nstars

def index_build_from(codekd, quads, starkd):
    return _util.index_build_from(codekd, quads, starkd)
index_build_from = _util.index_build_from

def index_load(indexname, flags, dest):
    return _util.index_load(indexname, flags, dest)
index_load = _util.index_load

def index_unload(index):
    return _util.index_unload(index)
index_unload = _util.index_unload

def index_reload(index):
    return _util.index_reload(index)
index_reload = _util.index_reload

def index_close_fds(index):
    return _util.index_close_fds(index)
index_close_fds = _util.index_close_fds

def index_close(index):
    return _util.index_close(index)
index_close = _util.index_close

def index_free(index):
    return _util.index_free(index)
index_free = _util.index_free

def index_get_missing_cut_params(indexid, hpnside, nsweep, dedup, margin, band):
    return _util.index_get_missing_cut_params(indexid, hpnside, nsweep, dedup, margin, band)
index_get_missing_cut_params = _util.index_get_missing_cut_params
class quadfile_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quadfile_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quadfile_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numquads"] = _util.quadfile_t_numquads_set
    __swig_getmethods__["numquads"] = _util.quadfile_t_numquads_get
    if _newclass:
        numquads = _swig_property(_util.quadfile_t_numquads_get, _util.quadfile_t_numquads_set)
    __swig_setmethods__["numstars"] = _util.quadfile_t_numstars_set
    __swig_getmethods__["numstars"] = _util.quadfile_t_numstars_get
    if _newclass:
        numstars = _swig_property(_util.quadfile_t_numstars_get, _util.quadfile_t_numstars_set)
    __swig_setmethods__["dimquads"] = _util.quadfile_t_dimquads_set
    __swig_getmethods__["dimquads"] = _util.quadfile_t_dimquads_get
    if _newclass:
        dimquads = _swig_property(_util.quadfile_t_dimquads_get, _util.quadfile_t_dimquads_set)
    __swig_setmethods__["index_scale_upper"] = _util.quadfile_t_index_scale_upper_set
    __swig_getmethods__["index_scale_upper"] = _util.quadfile_t_index_scale_upper_get
    if _newclass:
        index_scale_upper = _swig_property(_util.quadfile_t_index_scale_upper_get, _util.quadfile_t_index_scale_upper_set)
    __swig_setmethods__["index_scale_lower"] = _util.quadfile_t_index_scale_lower_set
    __swig_getmethods__["index_scale_lower"] = _util.quadfile_t_index_scale_lower_get
    if _newclass:
        index_scale_lower = _swig_property(_util.quadfile_t_index_scale_lower_get, _util.quadfile_t_index_scale_lower_set)
    __swig_setmethods__["indexid"] = _util.quadfile_t_indexid_set
    __swig_getmethods__["indexid"] = _util.quadfile_t_indexid_get
    if _newclass:
        indexid = _swig_property(_util.quadfile_t_indexid_get, _util.quadfile_t_indexid_set)
    __swig_setmethods__["healpix"] = _util.quadfile_t_healpix_set
    __swig_getmethods__["healpix"] = _util.quadfile_t_healpix_get
    if _newclass:
        healpix = _swig_property(_util.quadfile_t_healpix_get, _util.quadfile_t_healpix_set)
    __swig_setmethods__["hpnside"] = _util.quadfile_t_hpnside_set
    __swig_getmethods__["hpnside"] = _util.quadfile_t_hpnside_get
    if _newclass:
        hpnside = _swig_property(_util.quadfile_t_hpnside_get, _util.quadfile_t_hpnside_set)
    __swig_setmethods__["fb"] = _util.quadfile_t_fb_set
    __swig_getmethods__["fb"] = _util.quadfile_t_fb_get
    if _newclass:
        fb = _swig_property(_util.quadfile_t_fb_get, _util.quadfile_t_fb_set)
    __swig_setmethods__["quadarray"] = _util.quadfile_t_quadarray_set
    __swig_getmethods__["quadarray"] = _util.quadfile_t_quadarray_get
    if _newclass:
        quadarray = _swig_property(_util.quadfile_t_quadarray_get, _util.quadfile_t_quadarray_set)

    def __init__(self):
        this = _util.new_quadfile_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_quadfile_t
    __del__ = lambda self: None
quadfile_t_swigregister = _util.quadfile_t_swigregister
quadfile_t_swigregister(quadfile_t)


def quadfile_open(fname):
    return _util.quadfile_open(fname)
quadfile_open = _util.quadfile_open

def quadfile_open_fits(fits):
    return _util.quadfile_open_fits(fits)
quadfile_open_fits = _util.quadfile_open_fits

def quadfile_get_filename(qf):
    return _util.quadfile_get_filename(qf)
quadfile_get_filename = _util.quadfile_get_filename

def quadfile_open_for_writing(quadfname):
    return _util.quadfile_open_for_writing(quadfname)
quadfile_open_for_writing = _util.quadfile_open_for_writing

def quadfile_open_in_memory():
    return _util.quadfile_open_in_memory()
quadfile_open_in_memory = _util.quadfile_open_in_memory

def quadfile_switch_to_reading(qf):
    return _util.quadfile_switch_to_reading(qf)
quadfile_switch_to_reading = _util.quadfile_switch_to_reading

def quadfile_close(qf):
    return _util.quadfile_close(qf)
quadfile_close = _util.quadfile_close

def quadfile_check(qf):
    return _util.quadfile_check(qf)
quadfile_check = _util.quadfile_check

def quadfile_get_stars(qf, quadid):
    return _util.quadfile_get_stars(qf, quadid)
quadfile_get_stars = _util.quadfile_get_stars

def quadfile_write_quad(qf):
    return _util.quadfile_write_quad(qf)
quadfile_write_quad = _util.quadfile_write_quad

def quadfile_dimquads(qf):
    return _util.quadfile_dimquads(qf)
quadfile_dimquads = _util.quadfile_dimquads

def quadfile_nquads(qf):
    return _util.quadfile_nquads(qf)
quadfile_nquads = _util.quadfile_nquads

def quadfile_fix_header(qf):
    return _util.quadfile_fix_header(qf)
quadfile_fix_header = _util.quadfile_fix_header

def quadfile_write_header(qf):
    return _util.quadfile_write_header(qf)
quadfile_write_header = _util.quadfile_write_header

def quadfile_get_index_scale_upper_arcsec(qf):
    return _util.quadfile_get_index_scale_upper_arcsec(qf)
quadfile_get_index_scale_upper_arcsec = _util.quadfile_get_index_scale_upper_arcsec

def quadfile_get_index_scale_lower_arcsec(qf):
    return _util.quadfile_get_index_scale_lower_arcsec(qf)
quadfile_get_index_scale_lower_arcsec = _util.quadfile_get_index_scale_lower_arcsec

def quadfile_get_header(qf):
    return _util.quadfile_get_header(qf)
quadfile_get_header = _util.quadfile_get_header

def quadfile_write_header_to(qf, fid):
    return _util.quadfile_write_header_to(qf, fid)
quadfile_write_header_to = _util.quadfile_write_header_to

def quadfile_write_all_quads_to(qf, fid):
    return _util.quadfile_write_all_quads_to(qf, fid)
quadfile_write_all_quads_to = _util.quadfile_write_all_quads_to
AN_FILETYPE_CODETREE = _util.AN_FILETYPE_CODETREE
CODETREE_NAME = _util.CODETREE_NAME
class codetree_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, codetree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, codetree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _util.codetree_t_tree_set
    __swig_getmethods__["tree"] = _util.codetree_t_tree_get
    if _newclass:
        tree = _swig_property(_util.codetree_t_tree_get, _util.codetree_t_tree_set)
    __swig_setmethods__["header"] = _util.codetree_t_header_set
    __swig_getmethods__["header"] = _util.codetree_t_header_get
    if _newclass:
        header = _swig_property(_util.codetree_t_header_get, _util.codetree_t_header_set)
    __swig_setmethods__["inverse_perm"] = _util.codetree_t_inverse_perm_set
    __swig_getmethods__["inverse_perm"] = _util.codetree_t_inverse_perm_get
    if _newclass:
        inverse_perm = _swig_property(_util.codetree_t_inverse_perm_get, _util.codetree_t_inverse_perm_set)

    def __init__(self):
        this = _util.new_codetree_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_codetree_t
    __del__ = lambda self: None
codetree_t_swigregister = _util.codetree_t_swigregister
codetree_t_swigregister(codetree_t)


def codetree_open(fn):
    return _util.codetree_open(fn)
codetree_open = _util.codetree_open

def codetree_open_fits(fits):
    return _util.codetree_open_fits(fits)
codetree_open_fits = _util.codetree_open_fits

def codetree_get(s, codeid, code):
    return _util.codetree_get(s, codeid, code)
codetree_get = _util.codetree_get

def codetree_N(s):
    return _util.codetree_N(s)
codetree_N = _util.codetree_N

def codetree_nodes(s):
    return _util.codetree_nodes(s)
codetree_nodes = _util.codetree_nodes

def codetree_D(s):
    return _util.codetree_D(s)
codetree_D = _util.codetree_D

def codetree_get_permuted(s, index):
    return _util.codetree_get_permuted(s, index)
codetree_get_permuted = _util.codetree_get_permuted

def codetree_header(s):
    return _util.codetree_header(s)
codetree_header = _util.codetree_header

def codetree_close(s):
    return _util.codetree_close(s)
codetree_close = _util.codetree_close

def codetree_new():
    return _util.codetree_new()
codetree_new = _util.codetree_new

def codetree_append_to(s, fid):
    return _util.codetree_append_to(s, fid)
codetree_append_to = _util.codetree_append_to

def codetree_write_to_file(s, fn):
    return _util.codetree_write_to_file(s, fn)
codetree_write_to_file = _util.codetree_write_to_file

def codetree_write_to_file_flipped(s, fn):
    return _util.codetree_write_to_file_flipped(s, fn)
codetree_write_to_file_flipped = _util.codetree_write_to_file_flipped
AN_FILETYPE_STARTREE = _util.AN_FILETYPE_STARTREE
AN_FILETYPE_TAGALONG = _util.AN_FILETYPE_TAGALONG
STARTREE_NAME = _util.STARTREE_NAME
class startree_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, startree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, startree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _util.startree_t_tree_set
    __swig_getmethods__["tree"] = _util.startree_t_tree_get
    if _newclass:
        tree = _swig_property(_util.startree_t_tree_get, _util.startree_t_tree_set)
    __swig_setmethods__["header"] = _util.startree_t_header_set
    __swig_getmethods__["header"] = _util.startree_t_header_get
    if _newclass:
        header = _swig_property(_util.startree_t_header_get, _util.startree_t_header_set)
    __swig_setmethods__["inverse_perm"] = _util.startree_t_inverse_perm_set
    __swig_getmethods__["inverse_perm"] = _util.startree_t_inverse_perm_get
    if _newclass:
        inverse_perm = _swig_property(_util.startree_t_inverse_perm_get, _util.startree_t_inverse_perm_set)
    __swig_setmethods__["sweep"] = _util.startree_t_sweep_set
    __swig_getmethods__["sweep"] = _util.startree_t_sweep_get
    if _newclass:
        sweep = _swig_property(_util.startree_t_sweep_get, _util.startree_t_sweep_set)
    __swig_setmethods__["writing"] = _util.startree_t_writing_set
    __swig_getmethods__["writing"] = _util.startree_t_writing_get
    if _newclass:
        writing = _swig_property(_util.startree_t_writing_get, _util.startree_t_writing_set)
    __swig_setmethods__["tagalong"] = _util.startree_t_tagalong_set
    __swig_getmethods__["tagalong"] = _util.startree_t_tagalong_get
    if _newclass:
        tagalong = _swig_property(_util.startree_t_tagalong_get, _util.startree_t_tagalong_set)

    def __init__(self):
        this = _util.new_startree_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_startree_t
    __del__ = lambda self: None
startree_t_swigregister = _util.startree_t_swigregister
startree_t_swigregister(startree_t)


def startree_open(fn):
    return _util.startree_open(fn)
startree_open = _util.startree_open

def startree_open_fits(fits):
    return _util.startree_open_fits(fits)
startree_open_fits = _util.startree_open_fits

def startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds, nresults):
    return _util.startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds, nresults)
startree_search_for = _util.startree_search_for

def startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds, nresults):
    return _util.startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds, nresults)
startree_search_for_radec = _util.startree_search_for_radec

def startree_search(s, xyzcenter, radius2, xyzresults, radecresults, nresults):
    return _util.startree_search(s, xyzcenter, radius2, xyzresults, radecresults, nresults)
startree_search = _util.startree_search

def startree_get_data_column(s, colname, indices, N):
    return _util.startree_get_data_column(s, colname, indices, N)
startree_get_data_column = _util.startree_get_data_column

def startree_get_data_column_int64(s, colname, indices, N):
    return _util.startree_get_data_column_int64(s, colname, indices, N)
startree_get_data_column_int64 = _util.startree_get_data_column_int64

def startree_get_data_column_array(s, colname, indices, N, arraysize):
    return _util.startree_get_data_column_array(s, colname, indices, N, arraysize)
startree_get_data_column_array = _util.startree_get_data_column_array

def startree_free_data_column(s, d):
    return _util.startree_free_data_column(s, d)
startree_free_data_column = _util.startree_free_data_column

def startree_has_tagalong(s):
    return _util.startree_has_tagalong(s)
startree_has_tagalong = _util.startree_has_tagalong

def startree_get_tagalong(s):
    return _util.startree_get_tagalong(s)
startree_get_tagalong = _util.startree_get_tagalong

def startree_get_tagalong_column_names(s, lst):
    return _util.startree_get_tagalong_column_names(s, lst)
startree_get_tagalong_column_names = _util.startree_get_tagalong_column_names

def startree_get_tagalong_N_columns(s):
    return _util.startree_get_tagalong_N_columns(s)
startree_get_tagalong_N_columns = _util.startree_get_tagalong_N_columns

def startree_get_tagalong_column_name(s, i):
    return _util.startree_get_tagalong_column_name(s, i)
startree_get_tagalong_column_name = _util.startree_get_tagalong_column_name

def startree_get_tagalong_column_fits_type(s, i):
    return _util.startree_get_tagalong_column_fits_type(s, i)
startree_get_tagalong_column_fits_type = _util.startree_get_tagalong_column_fits_type

def startree_get_tagalong_column_array_size(s, i):
    return _util.startree_get_tagalong_column_array_size(s, i)
startree_get_tagalong_column_array_size = _util.startree_get_tagalong_column_array_size

def startree_get_cut_nside(s):
    return _util.startree_get_cut_nside(s)
startree_get_cut_nside = _util.startree_get_cut_nside

def startree_get_cut_nsweeps(s):
    return _util.startree_get_cut_nsweeps(s)
startree_get_cut_nsweeps = _util.startree_get_cut_nsweeps

def startree_get_cut_dedup(s):
    return _util.startree_get_cut_dedup(s)
startree_get_cut_dedup = _util.startree_get_cut_dedup

def startree_get_cut_band(s):
    return _util.startree_get_cut_band(s)
startree_get_cut_band = _util.startree_get_cut_band

def startree_get_cut_margin(s):
    return _util.startree_get_cut_margin(s)
startree_get_cut_margin = _util.startree_get_cut_margin

def startree_get_jitter(s):
    return _util.startree_get_jitter(s)
startree_get_jitter = _util.startree_get_jitter

def startree_set_jitter(s, jitter_arcsec):
    return _util.startree_set_jitter(s, jitter_arcsec)
startree_set_jitter = _util.startree_set_jitter

def startree_get_sweep(s, ind):
    return _util.startree_get_sweep(s, ind)
startree_get_sweep = _util.startree_get_sweep

def startree_N(s):
    return _util.startree_N(s)
startree_N = _util.startree_N

def startree_nodes(s):
    return _util.startree_nodes(s)
startree_nodes = _util.startree_nodes

def startree_D(s):
    return _util.startree_D(s)
startree_D = _util.startree_D

def startree_header(s):
    return _util.startree_header(s)
startree_header = _util.startree_header

def startree_get(s, starid, posn):
    return _util.startree_get(s, starid, posn)
startree_get = _util.startree_get

def startree_get_radec(s, starid, ra, dec):
    return _util.startree_get_radec(s, starid, ra, dec)
startree_get_radec = _util.startree_get_radec

def startree_close(s):
    return _util.startree_close(s)
startree_close = _util.startree_close

def startree_compute_inverse_perm(s):
    return _util.startree_compute_inverse_perm(s)
startree_compute_inverse_perm = _util.startree_compute_inverse_perm

def startree_check_inverse_perm(s):
    return _util.startree_check_inverse_perm(s)
startree_check_inverse_perm = _util.startree_check_inverse_perm

def startree_new():
    return _util.startree_new()
startree_new = _util.startree_new

def startree_write_to_file(s, fn):
    return _util.startree_write_to_file(s, fn)
startree_write_to_file = _util.startree_write_to_file

def startree_write_to_file_flipped(s, fn):
    return _util.startree_write_to_file_flipped(s, fn)
startree_write_to_file_flipped = _util.startree_write_to_file_flipped

def startree_append_to(s, fid):
    return _util.startree_append_to(s, fid)
startree_append_to = _util.startree_append_to

def code_alloc(DC):
    return _util.code_alloc(DC)
code_alloc = _util.code_alloc

def code_free(code):
    return _util.code_free(code)
code_free = _util.code_free

def code_get(code, i):
    return _util.code_get(code, i)
code_get = _util.code_get

def codekd_addr(ind):
    return _util.codekd_addr(ind)
codekd_addr = _util.codekd_addr

def starkd_addr(ind):
    return _util.starkd_addr(ind)
starkd_addr = _util.starkd_addr

def quadfile_addr(ind):
    return _util.quadfile_addr(ind)
quadfile_addr = _util.quadfile_addr
HP_MAX_INT_NSIDE = _util.HP_MAX_INT_NSIDE

def healpix_xy_to_ring(hp, Nside):
    return _util.healpix_xy_to_ring(hp, Nside)
healpix_xy_to_ring = _util.healpix_xy_to_ring

def healpix_ring_to_xy(ring_index, Nside):
    return _util.healpix_ring_to_xy(ring_index, Nside)
healpix_ring_to_xy = _util.healpix_ring_to_xy

def healpix_xy_to_nested(hp, Nside):
    return _util.healpix_xy_to_nested(hp, Nside)
healpix_xy_to_nested = _util.healpix_xy_to_nested

def healpix_nested_to_xy(nested_index, Nside):
    return _util.healpix_nested_to_xy(nested_index, Nside)
healpix_nested_to_xy = _util.healpix_nested_to_xy

def healpix_decompose_ring(ring_index, Nside, p_ring_number, p_longitude_index):
    return _util.healpix_decompose_ring(ring_index, Nside, p_ring_number, p_longitude_index)
healpix_decompose_ring = _util.healpix_decompose_ring

def healpix_compose_ring(ring, longind, Nside):
    return _util.healpix_compose_ring(ring, longind, Nside)
healpix_compose_ring = _util.healpix_compose_ring

def healpix_decompose_xy(finehp, bighp, x, y, Nside):
    return _util.healpix_decompose_xy(finehp, bighp, x, y, Nside)
healpix_decompose_xy = _util.healpix_decompose_xy

def healpix_decompose_xyl(finehp, bighp, x, y, Nside):
    return _util.healpix_decompose_xyl(finehp, bighp, x, y, Nside)
healpix_decompose_xyl = _util.healpix_decompose_xyl

def healpix_compose_xy(bighp, x, y, Nside):
    return _util.healpix_compose_xy(bighp, x, y, Nside)
healpix_compose_xy = _util.healpix_compose_xy

def healpix_compose_xyl(bighp, x, y, Nside):
    return _util.healpix_compose_xyl(bighp, x, y, Nside)
healpix_compose_xyl = _util.healpix_compose_xyl

def healpix_convert_xy_nside(x, y, nside, outnside, outx, outy):
    return _util.healpix_convert_xy_nside(x, y, nside, outnside, outx, outy)
healpix_convert_xy_nside = _util.healpix_convert_xy_nside

def healpix_convert_nside(hp, nside, outnside, outhp):
    return _util.healpix_convert_nside(hp, nside, outnside, outhp)
healpix_convert_nside = _util.healpix_convert_nside

def radectohealpix(ra, dec, Nside):
    return _util.radectohealpix(ra, dec, Nside)
radectohealpix = _util.radectohealpix

def radectohealpixf(ra, dec, Nside):
    return _util.radectohealpixf(ra, dec, Nside)
radectohealpixf = _util.radectohealpixf

def radectohealpixl(ra, dec, Nside):
    return _util.radectohealpixl(ra, dec, Nside)
radectohealpixl = _util.radectohealpixl

def radectohealpixlf(ra, dec, Nside):
    return _util.radectohealpixlf(ra, dec, Nside)
radectohealpixlf = _util.radectohealpixlf

def radecdegtohealpix(ra, dec, Nside):
    return _util.radecdegtohealpix(ra, dec, Nside)
radecdegtohealpix = _util.radecdegtohealpix

def radecdegtohealpixf(ra, dec, Nside):
    return _util.radecdegtohealpixf(ra, dec, Nside)
radecdegtohealpixf = _util.radecdegtohealpixf

def radecdegtohealpixl(ra, dec, Nside):
    return _util.radecdegtohealpixl(ra, dec, Nside)
radecdegtohealpixl = _util.radecdegtohealpixl

def radecdegtohealpixlf(ra, dec, Nside):
    return _util.radecdegtohealpixlf(ra, dec, Nside)
radecdegtohealpixlf = _util.radecdegtohealpixlf

def xyztohealpix(x, y, z, Nside):
    return _util.xyztohealpix(x, y, z, Nside)
xyztohealpix = _util.xyztohealpix

def xyztohealpixl(x, y, z, Nside):
    return _util.xyztohealpixl(x, y, z, Nside)
xyztohealpixl = _util.xyztohealpixl

def xyztohealpixf(x, y, z, Nside):
    return _util.xyztohealpixf(x, y, z, Nside)
xyztohealpixf = _util.xyztohealpixf

def xyztohealpixlf(x, y, z, Nside):
    return _util.xyztohealpixlf(x, y, z, Nside)
xyztohealpixlf = _util.xyztohealpixlf

def xyzarrtohealpix(xyz, Nside):
    return _util.xyzarrtohealpix(xyz, Nside)
xyzarrtohealpix = _util.xyzarrtohealpix

def xyzarrtohealpixl(xyz, Nside):
    return _util.xyzarrtohealpixl(xyz, Nside)
xyzarrtohealpixl = _util.xyzarrtohealpixl

def xyzarrtohealpixf(xyz, Nside):
    return _util.xyzarrtohealpixf(xyz, Nside)
xyzarrtohealpixf = _util.xyzarrtohealpixf

def healpix_to_xyz(hp, Nside, dx, dy):
    return _util.healpix_to_xyz(hp, Nside, dx, dy)
healpix_to_xyz = _util.healpix_to_xyz

def healpix_to_xyzarr(hp, Nside, dx, dy, xyz):
    return _util.healpix_to_xyzarr(hp, Nside, dx, dy, xyz)
healpix_to_xyzarr = _util.healpix_to_xyzarr

def healpix_to_radec(hp, Nside, dx, dy):
    return _util.healpix_to_radec(hp, Nside, dx, dy)
healpix_to_radec = _util.healpix_to_radec

def healpix_to_radecdeg(hp, Nside, dx, dy):
    return _util.healpix_to_radecdeg(hp, Nside, dx, dy)
healpix_to_radecdeg = _util.healpix_to_radecdeg

def healpixl_to_radecdeg(hp, Nside, dx, dy):
    return _util.healpixl_to_radecdeg(hp, Nside, dx, dy)
healpixl_to_radecdeg = _util.healpixl_to_radecdeg

def healpix_to_radecarr(hp, Nside, dx, dy, radec):
    return _util.healpix_to_radecarr(hp, Nside, dx, dy, radec)
healpix_to_radecarr = _util.healpix_to_radecarr

def healpix_to_radecdegarr(hp, Nside, dx, dy, radec):
    return _util.healpix_to_radecdegarr(hp, Nside, dx, dy, radec)
healpix_to_radecdegarr = _util.healpix_to_radecdegarr

def healpix_side_length_arcmin(Nside):
    return _util.healpix_side_length_arcmin(Nside)
healpix_side_length_arcmin = _util.healpix_side_length_arcmin

def healpix_nside_for_side_length_arcmin(arcmin):
    return _util.healpix_nside_for_side_length_arcmin(arcmin)
healpix_nside_for_side_length_arcmin = _util.healpix_nside_for_side_length_arcmin

def healpix_get_neighbours(hp, Nside):
    return _util.healpix_get_neighbours(hp, Nside)
healpix_get_neighbours = _util.healpix_get_neighbours

def healpix_get_neighboursl(pix, neighbour, Nside):
    return _util.healpix_get_neighboursl(pix, neighbour, Nside)
healpix_get_neighboursl = _util.healpix_get_neighboursl

def healpix_get_neighbours_within_range(xyz, range, healpixes, Nside):
    return _util.healpix_get_neighbours_within_range(xyz, range, healpixes, Nside)
healpix_get_neighbours_within_range = _util.healpix_get_neighbours_within_range

def healpix_get_neighbours_within_range_radec(ra, dec, radius, healpixes, Nside):
    return _util.healpix_get_neighbours_within_range_radec(ra, dec, radius, healpixes, Nside)
healpix_get_neighbours_within_range_radec = _util.healpix_get_neighbours_within_range_radec

def healpix_distance_to_radec(hp, Nside, ra, dec, closestradec):
    return _util.healpix_distance_to_radec(hp, Nside, ra, dec, closestradec)
healpix_distance_to_radec = _util.healpix_distance_to_radec

def healpix_distance_to_xyz(hp, Nside, xyz, closestxyz):
    return _util.healpix_distance_to_xyz(hp, Nside, xyz, closestxyz)
healpix_distance_to_xyz = _util.healpix_distance_to_xyz

def healpix_within_range_of_radec(hp, Nside, ra, dec, radius):
    return _util.healpix_within_range_of_radec(hp, Nside, ra, dec, radius)
healpix_within_range_of_radec = _util.healpix_within_range_of_radec

def healpix_within_range_of_xyz(hp, Nside, xyz, radius):
    return _util.healpix_within_range_of_xyz(hp, Nside, xyz, radius)
healpix_within_range_of_xyz = _util.healpix_within_range_of_xyz

def healpix_radec_bounds(hp, nside):
    return _util.healpix_radec_bounds(hp, nside)
healpix_radec_bounds = _util.healpix_radec_bounds

def healpix_rangesearch_xyz(xyz, radius, Nside):
    return _util.healpix_rangesearch_xyz(xyz, radius, Nside)
healpix_rangesearch_xyz = _util.healpix_rangesearch_xyz

def healpix_rangesearch_xyz_approx(xyz, radius, Nside):
    return _util.healpix_rangesearch_xyz_approx(xyz, radius, Nside)
healpix_rangesearch_xyz_approx = _util.healpix_rangesearch_xyz_approx

def healpix_rangesearch_radec_approx(ra, dec, radius, Nside):
    return _util.healpix_rangesearch_radec_approx(ra, dec, radius, Nside)
healpix_rangesearch_radec_approx = _util.healpix_rangesearch_radec_approx

def healpix_rangesearch_radec(ra, dec, radius, Nside):
    return _util.healpix_rangesearch_radec(ra, dec, radius, Nside)
healpix_rangesearch_radec = _util.healpix_rangesearch_radec

def healpix_region_search(seed, seeds, Nside, accepted, rejected, accept, token, depth):
    return _util.healpix_region_search(seed, seeds, Nside, accepted, rejected, accept, token, depth)
healpix_region_search = _util.healpix_region_search

def anwcs_wcslib_to_string(wcs):
    return _util.anwcs_wcslib_to_string(wcs)
anwcs_wcslib_to_string = _util.anwcs_wcslib_to_string
ANWCS_TYPE_WCSLIB = _util.ANWCS_TYPE_WCSLIB
ANWCS_TYPE_SIP = _util.ANWCS_TYPE_SIP
ANWCS_TYPE_WCSTOOLS = _util.ANWCS_TYPE_WCSTOOLS
class anwcs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anwcs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anwcs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _util.anwcs_t_type_set
    __swig_getmethods__["type"] = _util.anwcs_t_type_get
    if _newclass:
        type = _swig_property(_util.anwcs_t_type_get, _util.anwcs_t_type_set)
    __swig_setmethods__["data"] = _util.anwcs_t_data_set
    __swig_getmethods__["data"] = _util.anwcs_t_data_get
    if _newclass:
        data = _swig_property(_util.anwcs_t_data_get, _util.anwcs_t_data_set)

    def __init__(self, fn, ext=0, slen=0):
        this = _util.new_anwcs_t(fn, ext, slen)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_anwcs_t
    __del__ = lambda self: None

    def pixel_scale(self):
        return _util.anwcs_t_pixel_scale(self)

    def get_center(self):
        return _util.anwcs_t_get_center(self)

    def get_radius(self):
        return _util.anwcs_t_get_radius(self)

    def is_inside(self, ra, dec):
        return _util.anwcs_t_is_inside(self, ra, dec)

    def get_width(self):
        return _util.anwcs_t_get_width(self)

    def get_height(self):
        return _util.anwcs_t_get_height(self)

    def set_width(self, W):
        return _util.anwcs_t_set_width(self, W)

    def set_height(self, H):
        return _util.anwcs_t_set_height(self, H)

    def pixelxy2radec(self, x, y):
        return _util.anwcs_t_pixelxy2radec(self, x, y)

    def radec2pixelxy(self, ra, dec):
        return _util.anwcs_t_radec2pixelxy(self, ra, dec)

    def write_to(self, filename):
        return _util.anwcs_t_write_to(self, filename)
anwcs_t_swigregister = _util.anwcs_t_swigregister
anwcs_t_swigregister(anwcs_t)


def anwcs_walk_outline(wcs, path, fill):
    return _util.anwcs_walk_outline(wcs, path, fill)
anwcs_walk_outline = _util.anwcs_walk_outline

def anwcs_wcslib_from_string(str, len):
    return _util.anwcs_wcslib_from_string(str, len)
anwcs_wcslib_from_string = _util.anwcs_wcslib_from_string

def anwcs_open(filename, ext):
    return _util.anwcs_open(filename, ext)
anwcs_open = _util.anwcs_open

def anwcs_open_wcslib(filename, ext):
    return _util.anwcs_open_wcslib(filename, ext)
anwcs_open_wcslib = _util.anwcs_open_wcslib

def anwcs_open_wcstools(filename, ext):
    return _util.anwcs_open_wcstools(filename, ext)
anwcs_open_wcstools = _util.anwcs_open_wcstools

def anwcs_wcstools_from_string(str, len):
    return _util.anwcs_wcstools_from_string(str, len)
anwcs_wcstools_from_string = _util.anwcs_wcstools_from_string

def anwcs_open_sip(filename, ext):
    return _util.anwcs_open_sip(filename, ext)
anwcs_open_sip = _util.anwcs_open_sip

def anwcs_open_tan(filename, ext):
    return _util.anwcs_open_tan(filename, ext)
anwcs_open_tan = _util.anwcs_open_tan

def anwcs_new_sip(sip):
    return _util.anwcs_new_sip(sip)
anwcs_new_sip = _util.anwcs_new_sip

def anwcs_new_tan(tan):
    return _util.anwcs_new_tan(tan)
anwcs_new_tan = _util.anwcs_new_tan

def anwcs_create_box(ra, dec, width, W, H):
    return _util.anwcs_create_box(ra, dec, width, W, H)
anwcs_create_box = _util.anwcs_create_box

def anwcs_create_box_upsidedown(ra, dec, width, W, H):
    return _util.anwcs_create_box_upsidedown(ra, dec, width, W, H)
anwcs_create_box_upsidedown = _util.anwcs_create_box_upsidedown

def anwcs_create_mercator(refra, refdec, zoomfactor, W, H, yflip):
    return _util.anwcs_create_mercator(refra, refdec, zoomfactor, W, H, yflip)
anwcs_create_mercator = _util.anwcs_create_mercator

def anwcs_create_mercator_2(refra, refdec, crpix1, crpix2, zoomfactor, W, H, yflip):
    return _util.anwcs_create_mercator_2(refra, refdec, crpix1, crpix2, zoomfactor, W, H, yflip)
anwcs_create_mercator_2 = _util.anwcs_create_mercator_2

def anwcs_create_mollweide(refra, refdec, zoomfactor, W, H, yflip):
    return _util.anwcs_create_mollweide(refra, refdec, zoomfactor, W, H, yflip)
anwcs_create_mollweide = _util.anwcs_create_mollweide

def anwcs_create_hammer_aitoff(refra, refdec, zoomfactor, W, H, yflip):
    return _util.anwcs_create_hammer_aitoff(refra, refdec, zoomfactor, W, H, yflip)
anwcs_create_hammer_aitoff = _util.anwcs_create_hammer_aitoff

def anwcs_create_allsky_hammer_aitoff(refra, refdec, W, H):
    return _util.anwcs_create_allsky_hammer_aitoff(refra, refdec, W, H)
anwcs_create_allsky_hammer_aitoff = _util.anwcs_create_allsky_hammer_aitoff

def anwcs_create_allsky_hammer_aitoff2(refra, refdec, W, H):
    return _util.anwcs_create_allsky_hammer_aitoff2(refra, refdec, W, H)
anwcs_create_allsky_hammer_aitoff2 = _util.anwcs_create_allsky_hammer_aitoff2

def anwcs_write(wcs, filename):
    return _util.anwcs_write(wcs, filename)
anwcs_write = _util.anwcs_write

def anwcs_write_to(wcs, fid):
    return _util.anwcs_write_to(wcs, fid)
anwcs_write_to = _util.anwcs_write_to

def anwcs_add_to_header(wcs, hdr):
    return _util.anwcs_add_to_header(wcs, hdr)
anwcs_add_to_header = _util.anwcs_add_to_header

def anwcs_radec2pixelxy(wcs, ra, dec):
    return _util.anwcs_radec2pixelxy(wcs, ra, dec)
anwcs_radec2pixelxy = _util.anwcs_radec2pixelxy

def anwcs_pixelxy2radec(wcs, px, py):
    return _util.anwcs_pixelxy2radec(wcs, px, py)
anwcs_pixelxy2radec = _util.anwcs_pixelxy2radec

def anwcs_pixelxy2xyz(wcs, px, py):
    return _util.anwcs_pixelxy2xyz(wcs, px, py)
anwcs_pixelxy2xyz = _util.anwcs_pixelxy2xyz

def anwcs_xyz2pixelxy(wcs, xyz, px, py):
    return _util.anwcs_xyz2pixelxy(wcs, xyz, px, py)
anwcs_xyz2pixelxy = _util.anwcs_xyz2pixelxy

def anwcs_radec_is_inside_image(wcs, ra, dec):
    return _util.anwcs_radec_is_inside_image(wcs, ra, dec)
anwcs_radec_is_inside_image = _util.anwcs_radec_is_inside_image

def anwcs_get_cd_matrix(wcs):
    return _util.anwcs_get_cd_matrix(wcs)
anwcs_get_cd_matrix = _util.anwcs_get_cd_matrix

def anwcs_get_radec_bounds(wcs, stepsize):
    return _util.anwcs_get_radec_bounds(wcs, stepsize)
anwcs_get_radec_bounds = _util.anwcs_get_radec_bounds

def anwcs_print(wcs, fid):
    return _util.anwcs_print(wcs, fid)
anwcs_print = _util.anwcs_print

def anwcs_print_stdout(wcs):
    return _util.anwcs_print_stdout(wcs)
anwcs_print_stdout = _util.anwcs_print_stdout

def anwcs_get_radec_center_and_radius(anwcs):
    return _util.anwcs_get_radec_center_and_radius(anwcs)
anwcs_get_radec_center_and_radius = _util.anwcs_get_radec_center_and_radius

def anwcs_walk_image_boundary(wcs, stepsize, callback, token):
    return _util.anwcs_walk_image_boundary(wcs, stepsize, callback, token)
anwcs_walk_image_boundary = _util.anwcs_walk_image_boundary

def anwcs_find_discontinuity(wcs, ra1, dec1, ra2, dec2, pra3, pdec3, pra4, pdec4):
    return _util.anwcs_find_discontinuity(wcs, ra1, dec1, ra2, dec2, pra3, pdec3, pra4, pdec4)
anwcs_find_discontinuity = _util.anwcs_find_discontinuity

def anwcs_is_discontinuous(wcs, ra1, dec1, ra2, dec2):
    return _util.anwcs_is_discontinuous(wcs, ra1, dec1, ra2, dec2)
anwcs_is_discontinuous = _util.anwcs_is_discontinuous

def anwcs_walk_discontinuity(wcs, ra1, dec1, ra2, dec2, ra3, dec3, ra4, dec4, stepsize, radecs):
    return _util.anwcs_walk_discontinuity(wcs, ra1, dec1, ra2, dec2, ra3, dec3, ra4, dec4, stepsize, radecs)
anwcs_walk_discontinuity = _util.anwcs_walk_discontinuity

def anwcs_overlaps(wcs1, wcs2, stepsize):
    return _util.anwcs_overlaps(wcs1, wcs2, stepsize)
anwcs_overlaps = _util.anwcs_overlaps

def anwcs_imagew(anwcs):
    return _util.anwcs_imagew(anwcs)
anwcs_imagew = _util.anwcs_imagew

def anwcs_imageh(anwcs):
    return _util.anwcs_imageh(anwcs)
anwcs_imageh = _util.anwcs_imageh

def anwcs_set_size(anwcs, W, H):
    return _util.anwcs_set_size(anwcs, W, H)
anwcs_set_size = _util.anwcs_set_size

def anwcs_scale_wcs(anwcs, scale):
    return _util.anwcs_scale_wcs(anwcs, scale)
anwcs_scale_wcs = _util.anwcs_scale_wcs

def anwcs_rotate_wcs(anwcs, angle):
    return _util.anwcs_rotate_wcs(anwcs, angle)
anwcs_rotate_wcs = _util.anwcs_rotate_wcs

def anwcs_pixel_scale(anwcs):
    return _util.anwcs_pixel_scale(anwcs)
anwcs_pixel_scale = _util.anwcs_pixel_scale

def anwcs_free(wcs):
    return _util.anwcs_free(wcs)
anwcs_free = _util.anwcs_free

def anwcs_get_sip(wcs):
    return _util.anwcs_get_sip(wcs)
anwcs_get_sip = _util.anwcs_get_sip

anwcs = anwcs_t
anwcs.imagew = property(anwcs.get_width,  anwcs.set_width,  None, 'image width')
anwcs.imageh = property(anwcs.get_height, anwcs.set_height, None, 'image height')
anwcs.writeto = anwcs.write_to

def anwcs_t_get_shape(self):
    return int(self.get_height()), int(self.get_width())
anwcs_t.get_shape = anwcs_t_get_shape

def anwcs_t_set_shape(self, S):
    H,W = S
    self.set_height(H)
    self.set_width(W)
anwcs_t.set_shape = anwcs_t_set_shape
anwcs_t.shape = property(anwcs_t.get_shape, anwcs_t.set_shape, None, 'image shape')

# same API as tan_t
anwcs.radec_center = anwcs.get_center
anwcs.radius = anwcs.get_radius

def anwcs_from_string(s):
    return anwcs_t(s, -1, len(s))

def anwcs_get_header_string(self):
    s = anwcs_wcslib_to_string(self)
    return (s +
         'NAXIS   = 2' + ' '*69 +
         'NAXIS1  = % 20i' % self.imagew + ' '*50 +
         'NAXIS2  = % 20i' % self.imageh + ' '*50 +
         'END'+' '*77)
anwcs.getHeaderString = anwcs_get_header_string

def anwcs_radec_bounds(self, stepsize=1000):
    r0,r1,d0,d1 = anwcs_get_radec_bounds(self, stepsize)
    return r0,r1,d0,d1
anwcs.radec_bounds = anwcs_radec_bounds

def anwcs_get_cd(self):
    return anwcs_get_cd_matrix(self)
anwcs.get_cd = anwcs_get_cd


DIM_STARS = _util.DIM_STARS
DIM_XY = _util.DIM_XY
DQMAX = _util.DQMAX
DCMAX = _util.DCMAX

def dimquad2dimcode(dimquad):
    return _util.dimquad2dimcode(dimquad)
dimquad2dimcode = _util.dimquad2dimcode
ONE_OVER_SIXTY = _util.ONE_OVER_SIXTY
RAD_PER_DEG = _util.RAD_PER_DEG
RAD_PER_ARCMIN = _util.RAD_PER_ARCMIN
RAD_PER_ARCSEC = _util.RAD_PER_ARCSEC
DEG_PER_RAD = _util.DEG_PER_RAD
DEG_PER_ARCMIN = _util.DEG_PER_ARCMIN
DEG_PER_ARCSEC = _util.DEG_PER_ARCSEC
ARCMIN_PER_RAD = _util.ARCMIN_PER_RAD
ARCMIN_PER_DEG = _util.ARCMIN_PER_DEG
ARCMIN_PER_ARCSEC = _util.ARCMIN_PER_ARCSEC
ARCSEC_PER_RAD = _util.ARCSEC_PER_RAD
ARCSEC_PER_DEG = _util.ARCSEC_PER_DEG
ARCSEC_PER_ARCMIN = _util.ARCSEC_PER_ARCMIN

def rad2deg(x):
    return _util.rad2deg(x)
rad2deg = _util.rad2deg

def rad2arcmin(x):
    return _util.rad2arcmin(x)
rad2arcmin = _util.rad2arcmin

def rad2arcsec(x):
    return _util.rad2arcsec(x)
rad2arcsec = _util.rad2arcsec

def deg2rad(x):
    return _util.deg2rad(x)
deg2rad = _util.deg2rad

def deg2arcmin(x):
    return _util.deg2arcmin(x)
deg2arcmin = _util.deg2arcmin

def deg2arcsec(x):
    return _util.deg2arcsec(x)
deg2arcsec = _util.deg2arcsec

def arcmin2rad(x):
    return _util.arcmin2rad(x)
arcmin2rad = _util.arcmin2rad

def arcmin2deg(x):
    return _util.arcmin2deg(x)
arcmin2deg = _util.arcmin2deg

def arcmin2arcsec(x):
    return _util.arcmin2arcsec(x)
arcmin2arcsec = _util.arcmin2arcsec

def arcsec2rad(x):
    return _util.arcsec2rad(x)
arcsec2rad = _util.arcsec2rad

def arcsec2deg(x):
    return _util.arcsec2deg(x)
arcsec2deg = _util.arcsec2deg

def arcsec2arcmin(x):
    return _util.arcsec2arcmin(x)
arcsec2arcmin = _util.arcsec2arcmin
MJD_JD_OFFSET = _util.MJD_JD_OFFSET

def mjdtojd(mjd):
    return _util.mjdtojd(mjd)
mjdtojd = _util.mjdtojd

def jdtomjd(jd):
    return _util.jdtomjd(jd)
jdtomjd = _util.jdtomjd

def xy2ra(x, y):
    return _util.xy2ra(x, y)
xy2ra = _util.xy2ra

def z2dec(z):
    return _util.z2dec(z)
z2dec = _util.z2dec

def atora(str):
    return _util.atora(str)
atora = _util.atora

def atodec(str):
    return _util.atodec(str)
atodec = _util.atodec

def mag2flux(mag):
    return _util.mag2flux(mag)
mag2flux = _util.mag2flux

def radecrange2xyzrange(ralow, declow, rahigh, dechigh, xyzlow, xyzhigh):
    return _util.radecrange2xyzrange(ralow, declow, rahigh, dechigh, xyzlow, xyzhigh)
radecrange2xyzrange = _util.radecrange2xyzrange

def radec2xyz(ra, dec, x, y, z):
    return _util.radec2xyz(ra, dec, x, y, z)
radec2xyz = _util.radec2xyz

def xyz2radec(x, y, z):
    return _util.xyz2radec(x, y, z)
xyz2radec = _util.xyz2radec

def xyzarr2radec(xyz):
    return _util.xyzarr2radec(xyz)
xyzarr2radec = _util.xyzarr2radec

def xyzarr2radecarr(xyz, radec):
    return _util.xyzarr2radecarr(xyz, radec)
xyzarr2radecarr = _util.xyzarr2radecarr

def radec2xyzarr(ra, dec):
    return _util.radec2xyzarr(ra, dec)
radec2xyzarr = _util.radec2xyzarr

def radec2xyzarrmany(xyz, n):
    return _util.radec2xyzarrmany(xyz, n)
radec2xyzarrmany = _util.radec2xyzarrmany

def radecdeg2xyz(ra, dec, x, y, z):
    return _util.radecdeg2xyz(ra, dec, x, y, z)
radecdeg2xyz = _util.radecdeg2xyz

def xyzarr2radecdeg(xyz):
    return _util.xyzarr2radecdeg(xyz)
xyzarr2radecdeg = _util.xyzarr2radecdeg

def xyzarr2radecdegarr(xyz, radec):
    return _util.xyzarr2radecdegarr(xyz, radec)
xyzarr2radecdegarr = _util.xyzarr2radecdegarr

def radecdeg2xyzarr(ra, dec):
    return _util.radecdeg2xyzarr(ra, dec)
radecdeg2xyzarr = _util.radecdeg2xyzarr

def radecdegarr2xyzarr(radec, xyz):
    return _util.radecdegarr2xyzarr(radec, xyz)
radecdegarr2xyzarr = _util.radecdegarr2xyzarr

def radecdeg2xyzarrmany(xyz, n):
    return _util.radecdeg2xyzarrmany(xyz, n)
radecdeg2xyzarrmany = _util.radecdeg2xyzarrmany

def radec_derivatives(ra, dec, dra, ddec):
    return _util.radec_derivatives(ra, dec, dra, ddec)
radec_derivatives = _util.radec_derivatives

def distsq_between_radecdeg(ra1, dec1, ra2, dec2):
    return _util.distsq_between_radecdeg(ra1, dec1, ra2, dec2)
distsq_between_radecdeg = _util.distsq_between_radecdeg

def arcsec_between_radecdeg(ra1, dec1, ra2, dec2):
    return _util.arcsec_between_radecdeg(ra1, dec1, ra2, dec2)
arcsec_between_radecdeg = _util.arcsec_between_radecdeg

def deg_between_radecdeg(ra1, dec1, ra2, dec2):
    return _util.deg_between_radecdeg(ra1, dec1, ra2, dec2)
deg_between_radecdeg = _util.deg_between_radecdeg

def ra2mercx(ra):
    return _util.ra2mercx(ra)
ra2mercx = _util.ra2mercx

def dec2mercy(dec):
    return _util.dec2mercy(dec)
dec2mercy = _util.dec2mercy

def ra2hms(ra, h, m, s):
    return _util.ra2hms(ra, h, m, s)
ra2hms = _util.ra2hms

def dec2dms(dec, sign, d, m, s):
    return _util.dec2dms(dec, sign, d, m, s)
dec2dms = _util.dec2dms

def hms2ra(h, m, s):
    return _util.hms2ra(h, m, s)
hms2ra = _util.hms2ra

def dms2dec(sgn, d, m, s):
    return _util.dms2dec(sgn, d, m, s)
dms2dec = _util.dms2dec

def ra2hmsstring(ra, str):
    return _util.ra2hmsstring(ra, str)
ra2hmsstring = _util.ra2hmsstring

def dec2dmsstring(dec, str):
    return _util.dec2dmsstring(dec, str)
dec2dmsstring = _util.dec2dmsstring

def project_hammer_aitoff_x(x, y, z, projx, projy):
    return _util.project_hammer_aitoff_x(x, y, z, projx, projy)
project_hammer_aitoff_x = _util.project_hammer_aitoff_x

def project_equal_area(x, y, z, projx, projy):
    return _util.project_equal_area(x, y, z, projx, projy)
project_equal_area = _util.project_equal_area

def distsq2arc(dist2):
    return _util.distsq2arc(dist2)
distsq2arc = _util.distsq2arc

def distsq2rad(dist2):
    return _util.distsq2rad(dist2)
distsq2rad = _util.distsq2rad

def distsq2deg(dist2):
    return _util.distsq2deg(dist2)
distsq2deg = _util.distsq2deg

def dist2rad(dist):
    return _util.dist2rad(dist)
dist2rad = _util.dist2rad

def distsq2arcsec(dist2):
    return _util.distsq2arcsec(dist2)
distsq2arcsec = _util.distsq2arcsec

def dist2arcsec(dist):
    return _util.dist2arcsec(dist)
dist2arcsec = _util.dist2arcsec

def rad2distsq(arcInRadians):
    return _util.rad2distsq(arcInRadians)
rad2distsq = _util.rad2distsq

def rad2dist(arcInRadians):
    return _util.rad2dist(arcInRadians)
rad2dist = _util.rad2dist

def arcsec2distsq(arcInArcSec):
    return _util.arcsec2distsq(arcInArcSec)
arcsec2distsq = _util.arcsec2distsq

def arcsec2dist(arcInArcSec):
    return _util.arcsec2dist(arcInArcSec)
arcsec2dist = _util.arcsec2dist

def deg2dist(arcInDegrees):
    return _util.deg2dist(arcInDegrees)
deg2dist = _util.deg2dist

def deg2distsq(d):
    return _util.deg2distsq(d)
deg2distsq = _util.deg2distsq

def arcmin2dist(arcmin):
    return _util.arcmin2dist(arcmin)
arcmin2dist = _util.arcmin2dist

def arcmin2distsq(arcmin):
    return _util.arcmin2distsq(arcmin)
arcmin2distsq = _util.arcmin2distsq

def dist2deg(dist):
    return _util.dist2deg(dist)
dist2deg = _util.dist2deg
HELP_ERR = _util.HELP_ERR
OPT_ERR = _util.OPT_ERR

def make_rand_star(star, ramin, ramax, decmin, decmax):
    return _util.make_rand_star(star, ramin, ramax, decmin, decmax)
make_rand_star = _util.make_rand_star

def star_coords(s, r, tangent, x, y):
    return _util.star_coords(s, r, tangent, x, y)
star_coords = _util.star_coords

def star_midpoint(mid, A, B):
    return _util.star_midpoint(mid, A, B)
star_midpoint = _util.star_midpoint

def qfits_header_debug_dump(arg1):
    return _util.qfits_header_debug_dump(arg1)
qfits_header_debug_dump = _util.qfits_header_debug_dump

def qfits_header_list(hdr, out):
    return _util.qfits_header_list(hdr, out)
qfits_header_list = _util.qfits_header_list

def qfits_header_new():
    return _util.qfits_header_new()
qfits_header_new = _util.qfits_header_new

def qfits_header_default():
    return _util.qfits_header_default()
qfits_header_default = _util.qfits_header_default

def qfits_header_n(arg1):
    return _util.qfits_header_n(arg1)
qfits_header_n = _util.qfits_header_n

def qfits_header_add(arg1, arg2, arg3, arg4, arg5):
    return _util.qfits_header_add(arg1, arg2, arg3, arg4, arg5)
qfits_header_add = _util.qfits_header_add

def qfits_header_add_after(arg1, arg2, arg3, arg4, arg5, arg6):
    return _util.qfits_header_add_after(arg1, arg2, arg3, arg4, arg5, arg6)
qfits_header_add_after = _util.qfits_header_add_after

def qfits_header_append(arg1, arg2, arg3, arg4, arg5):
    return _util.qfits_header_append(arg1, arg2, arg3, arg4, arg5)
qfits_header_append = _util.qfits_header_append

def qfits_header_del(arg1, arg2):
    return _util.qfits_header_del(arg1, arg2)
qfits_header_del = _util.qfits_header_del

def qfits_header_sort(arg1):
    return _util.qfits_header_sort(arg1)
qfits_header_sort = _util.qfits_header_sort

def qfits_header_copy(arg1):
    return _util.qfits_header_copy(arg1)
qfits_header_copy = _util.qfits_header_copy

def qfits_header_mod(arg1, arg2, arg3, arg4):
    return _util.qfits_header_mod(arg1, arg2, arg3, arg4)
qfits_header_mod = _util.qfits_header_mod

def qfits_header_destroy(arg1):
    return _util.qfits_header_destroy(arg1)
qfits_header_destroy = _util.qfits_header_destroy

def qfits_header_getstr(arg1, arg2):
    return _util.qfits_header_getstr(arg1, arg2)
qfits_header_getstr = _util.qfits_header_getstr

def qfits_header_getstr_pretty(hdr, key, pretty, default_val):
    return _util.qfits_header_getstr_pretty(hdr, key, pretty, default_val)
qfits_header_getstr_pretty = _util.qfits_header_getstr_pretty

def qfits_header_getitem(arg1, arg2, arg3, arg4, arg5, arg6):
    return _util.qfits_header_getitem(arg1, arg2, arg3, arg4, arg5, arg6)
qfits_header_getitem = _util.qfits_header_getitem

def qfits_header_setitem(arg1, arg2, key, val, comment, line):
    return _util.qfits_header_setitem(arg1, arg2, key, val, comment, line)
qfits_header_setitem = _util.qfits_header_setitem

def qfits_header_getcom(arg1, arg2):
    return _util.qfits_header_getcom(arg1, arg2)
qfits_header_getcom = _util.qfits_header_getcom

def qfits_header_getint(arg1, arg2, arg3):
    return _util.qfits_header_getint(arg1, arg2, arg3)
qfits_header_getint = _util.qfits_header_getint

def qfits_header_getdouble(arg1, arg2, arg3):
    return _util.qfits_header_getdouble(arg1, arg2, arg3)
qfits_header_getdouble = _util.qfits_header_getdouble

def qfits_header_getboolean(arg1, arg2, arg3):
    return _util.qfits_header_getboolean(arg1, arg2, arg3)
qfits_header_getboolean = _util.qfits_header_getboolean

def qfits_header_dump(arg1, arg2):
    return _util.qfits_header_dump(arg1, arg2)
qfits_header_dump = _util.qfits_header_dump

def qfits_header_findmatch(hdr, key):
    return _util.qfits_header_findmatch(hdr, key)
qfits_header_findmatch = _util.qfits_header_findmatch

def qfits_header_write_line(hdr, line, result):
    return _util.qfits_header_write_line(hdr, line, result)
qfits_header_write_line = _util.qfits_header_write_line

def qfits_header_read_hdr_string(arg1):
    return _util.qfits_header_read_hdr_string(arg1)
qfits_header_read_hdr_string = _util.qfits_header_read_hdr_string

def qfits_zeropad(arg1):
    return _util.qfits_zeropad(arg1)
qfits_zeropad = _util.qfits_zeropad

def qfits_is_fits(arg1):
    return _util.qfits_is_fits(arg1)
qfits_is_fits = _util.qfits_is_fits

def is_blank_line(s):
    return _util.is_blank_line(s)
is_blank_line = _util.is_blank_line

def fitsio_to_qfits_header(hdr):
    hdrstr = ''
    for rec in hdr.records():
        cardstr = rec.get('card', None)
        if cardstr is None:
            cardstr = hdr._record2card(rec)
# pad
        cardstr = cardstr + ' '*(80 - len(cardstr))
        hdrstr += cardstr
    hdrstr += 'END' + ' '*77
    qhdr = qfits_header_read_hdr_string(hdrstr)
    return qhdr


def wcs_pv2sip_header(hdr, xy, Nxy, stepsize, xlo, xhi, ylo, yhi, imageW, imageH, order, forcetan, doshift):
    return _util.wcs_pv2sip_header(hdr, xy, Nxy, stepsize, xlo, xhi, ylo, yhi, imageW, imageH, order, forcetan, doshift)
wcs_pv2sip_header = _util.wcs_pv2sip_header

def wcs_pv2sip(wcsinfn, ext, wcsoutfn, scamp_head_file, xy, Nxy, stepsize, xlo, xhi, ylo, yhi, imageW, imageH, order, forcetan, doshift):
    return _util.wcs_pv2sip(wcsinfn, ext, wcsoutfn, scamp_head_file, xy, Nxy, stepsize, xlo, xhi, ylo, yhi, imageW, imageH, order, forcetan, doshift)
wcs_pv2sip = _util.wcs_pv2sip

def wcs_pv2sip_hdr(hdr, order=5, xlo=0, xhi=0, ylo=0, yhi=0,
                   stepsize=0, W=0, H=0):
    qhdr = fitsio_to_qfits_header(hdr)
    forcetan = False
    doshift = 1
    scamp = False

    sip = wcs_pv2sip_header(qhdr, None, 0, stepsize, xlo, xhi, ylo, yhi, W, H,
                            order, forcetan, doshift)
    return sip

SIP_MAXORDER = _util.SIP_MAXORDER
class tan_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tan_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tan_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["crval"] = _util.tan_t_crval_set
    __swig_getmethods__["crval"] = _util.tan_t_crval_get
    if _newclass:
        crval = _swig_property(_util.tan_t_crval_get, _util.tan_t_crval_set)
    __swig_setmethods__["crpix"] = _util.tan_t_crpix_set
    __swig_getmethods__["crpix"] = _util.tan_t_crpix_get
    if _newclass:
        crpix = _swig_property(_util.tan_t_crpix_get, _util.tan_t_crpix_set)
    __swig_setmethods__["cd"] = _util.tan_t_cd_set
    __swig_getmethods__["cd"] = _util.tan_t_cd_get
    if _newclass:
        cd = _swig_property(_util.tan_t_cd_get, _util.tan_t_cd_set)
    __swig_setmethods__["imagew"] = _util.tan_t_imagew_set
    __swig_getmethods__["imagew"] = _util.tan_t_imagew_get
    if _newclass:
        imagew = _swig_property(_util.tan_t_imagew_get, _util.tan_t_imagew_set)
    __swig_setmethods__["imageh"] = _util.tan_t_imageh_set
    __swig_getmethods__["imageh"] = _util.tan_t_imageh_get
    if _newclass:
        imageh = _swig_property(_util.tan_t_imageh_get, _util.tan_t_imageh_set)
    __swig_setmethods__["sin"] = _util.tan_t_sin_set
    __swig_getmethods__["sin"] = _util.tan_t_sin_get
    if _newclass:
        sin = _swig_property(_util.tan_t_sin_get, _util.tan_t_sin_set)

    def __init__(self, *args):
        this = _util.new_tan_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_tan_t
    __del__ = lambda self: None

    def set(self, crval1, crval2, crpix1, crpix2, cd11, cd12, cd21, cd22, imagew, imageh):
        return _util.tan_t_set(self, crval1, crval2, crpix1, crpix2, cd11, cd12, cd21, cd22, imagew, imageh)

    def is_inside(self, ra, dec):
        return _util.tan_t_is_inside(self, ra, dec)

    def scale(self, factor):
        return _util.tan_t_scale(self, factor)

    def get_width(self):
        return _util.tan_t_get_width(self)

    def get_height(self):
        return _util.tan_t_get_height(self)

    def set_width(self, x):
        return _util.tan_t_set_width(self, x)

    def set_height(self, x):
        return _util.tan_t_set_height(self, x)

    def pixel_scale(self):
        return _util.tan_t_pixel_scale(self)

    def radec_center(self):
        return _util.tan_t_radec_center(self)

    def radius(self):
        return _util.tan_t_radius(self)

    def xyzcenter(self):
        return _util.tan_t_xyzcenter(self)

    def pixelxy2xyz(self, x, y):
        return _util.tan_t_pixelxy2xyz(self, x, y)

    def pixelxy2radec(self, x, y):
        return _util.tan_t_pixelxy2radec(self, x, y)

    def radec2pixelxy(self, ra, dec):
        return _util.tan_t_radec2pixelxy(self, ra, dec)

    def iwc2pixelxy(self, u, v):
        return _util.tan_t_iwc2pixelxy(self, u, v)

    def pixelxy2iwc(self, x, y):
        return _util.tan_t_pixelxy2iwc(self, x, y)

    def iwc2radec(self, u, v):
        return _util.tan_t_iwc2radec(self, u, v)

    def radec2iwc(self, ra, dec):
        return _util.tan_t_radec2iwc(self, ra, dec)

    def xyz2pixelxy(self, x, y, z):
        return _util.tan_t_xyz2pixelxy(self, x, y, z)

    def write_to(self, filename):
        return _util.tan_t_write_to(self, filename)

    def set_crval(self, ra, dec):
        return _util.tan_t_set_crval(self, ra, dec)

    def set_crpix(self, x, y):
        return _util.tan_t_set_crpix(self, x, y)

    def set_cd(self, cd11, cd12, cd21, cd22):
        return _util.tan_t_set_cd(self, cd11, cd12, cd21, cd22)

    def set_imagesize(self, w, h):
        return _util.tan_t_set_imagesize(self, w, h)
tan_t_swigregister = _util.tan_t_swigregister
tan_t_swigregister(tan_t)

class sip_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sip_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sip_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wcstan"] = _util.sip_t_wcstan_set
    __swig_getmethods__["wcstan"] = _util.sip_t_wcstan_get
    if _newclass:
        wcstan = _swig_property(_util.sip_t_wcstan_get, _util.sip_t_wcstan_set)
    __swig_setmethods__["a_order"] = _util.sip_t_a_order_set
    __swig_getmethods__["a_order"] = _util.sip_t_a_order_get
    if _newclass:
        a_order = _swig_property(_util.sip_t_a_order_get, _util.sip_t_a_order_set)
    __swig_setmethods__["b_order"] = _util.sip_t_b_order_set
    __swig_getmethods__["b_order"] = _util.sip_t_b_order_get
    if _newclass:
        b_order = _swig_property(_util.sip_t_b_order_get, _util.sip_t_b_order_set)
    __swig_setmethods__["a"] = _util.sip_t_a_set
    __swig_getmethods__["a"] = _util.sip_t_a_get
    if _newclass:
        a = _swig_property(_util.sip_t_a_get, _util.sip_t_a_set)
    __swig_setmethods__["b"] = _util.sip_t_b_set
    __swig_getmethods__["b"] = _util.sip_t_b_get
    if _newclass:
        b = _swig_property(_util.sip_t_b_get, _util.sip_t_b_set)
    __swig_setmethods__["ap_order"] = _util.sip_t_ap_order_set
    __swig_getmethods__["ap_order"] = _util.sip_t_ap_order_get
    if _newclass:
        ap_order = _swig_property(_util.sip_t_ap_order_get, _util.sip_t_ap_order_set)
    __swig_setmethods__["bp_order"] = _util.sip_t_bp_order_set
    __swig_getmethods__["bp_order"] = _util.sip_t_bp_order_get
    if _newclass:
        bp_order = _swig_property(_util.sip_t_bp_order_get, _util.sip_t_bp_order_set)
    __swig_setmethods__["ap"] = _util.sip_t_ap_set
    __swig_getmethods__["ap"] = _util.sip_t_ap_get
    if _newclass:
        ap = _swig_property(_util.sip_t_ap_get, _util.sip_t_ap_set)
    __swig_setmethods__["bp"] = _util.sip_t_bp_set
    __swig_getmethods__["bp"] = _util.sip_t_bp_get
    if _newclass:
        bp = _swig_property(_util.sip_t_bp_get, _util.sip_t_bp_set)

    def __init__(self, *args):
        this = _util.new_sip_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _util.delete_sip_t
    __del__ = lambda self: None

    def get_subimage(self, x0, y0, w, h):
        return _util.sip_t_get_subimage(self, x0, y0, w, h)

    def scale(self, factor):
        return _util.sip_t_scale(self, factor)

    def pixel_scale(self):
        return _util.sip_t_pixel_scale(self)

    def radec_center(self):
        return _util.sip_t_radec_center(self)

    def radius(self):
        return _util.sip_t_radius(self)

    def write_to(self, filename):
        return _util.sip_t_write_to(self, filename)

    def ensure_inverse_polynomials(self):
        return _util.sip_t_ensure_inverse_polynomials(self)

    def pixelxy2xyz(self, x, y):
        return _util.sip_t_pixelxy2xyz(self, x, y)

    def pixelxy2radec(self, x, y):
        return _util.sip_t_pixelxy2radec(self, x, y)

    def radec2pixelxy(self, ra, dec):
        return _util.sip_t_radec2pixelxy(self, ra, dec)

    def iwc2pixelxy(self, u, v):
        return _util.sip_t_iwc2pixelxy(self, u, v)

    def pixelxy2iwc(self, x, y):
        return _util.sip_t_pixelxy2iwc(self, x, y)

    def iwc2radec(self, u, v):
        return _util.sip_t_iwc2radec(self, u, v)

    def radec2iwc(self, ra, dec):
        return _util.sip_t_radec2iwc(self, ra, dec)

    def xyz2pixelxy(self, x, y, z):
        return _util.sip_t_xyz2pixelxy(self, x, y, z)

    def is_inside(self, ra, dec):
        return _util.sip_t_is_inside(self, ra, dec)

    def set_a_term(self, i, j, val):
        return _util.sip_t_set_a_term(self, i, j, val)

    def set_b_term(self, i, j, val):
        return _util.sip_t_set_b_term(self, i, j, val)

    def set_ap_term(self, i, j, val):
        return _util.sip_t_set_ap_term(self, i, j, val)

    def set_bp_term(self, i, j, val):
        return _util.sip_t_set_bp_term(self, i, j, val)

    def get_a_term(self, i, j):
        return _util.sip_t_get_a_term(self, i, j)

    def get_b_term(self, i, j):
        return _util.sip_t_get_b_term(self, i, j)

    def get_ap_term(self, i, j):
        return _util.sip_t_get_ap_term(self, i, j)

    def get_bp_term(self, i, j):
        return _util.sip_t_get_bp_term(self, i, j)

    def set_width(self, x):
        return _util.sip_t_set_width(self, x)

    def set_height(self, x):
        return _util.sip_t_set_height(self, x)

    def get_width(self):
        return _util.sip_t_get_width(self)

    def get_height(self):
        return _util.sip_t_get_height(self)

    def get_distortion(self, x, y):
        return _util.sip_t_get_distortion(self, x, y)

    def get_undistortion(self, x, y):
        return _util.sip_t_get_undistortion(self, x, y)
sip_t_swigregister = _util.sip_t_swigregister
sip_t_swigregister(sip_t)


def sip_create():
    return _util.sip_create()
sip_create = _util.sip_create

def sip_free(sip):
    return _util.sip_free(sip)
sip_free = _util.sip_free

def sip_copy(dest, src):
    return _util.sip_copy(dest, src)
sip_copy = _util.sip_copy

def sip_wrap_tan(tan, sip):
    return _util.sip_wrap_tan(tan, sip)
sip_wrap_tan = _util.sip_wrap_tan

def sip_imagew(sip):
    return _util.sip_imagew(sip)
sip_imagew = _util.sip_imagew

def sip_imageh(sip):
    return _util.sip_imageh(sip)
sip_imageh = _util.sip_imageh

def sip_pixelxy2radec(sip, px, py, a, d):
    return _util.sip_pixelxy2radec(sip, px, py, a, d)
sip_pixelxy2radec = _util.sip_pixelxy2radec

def sip_pixelxy2xyzarr(sip, px, py, xyz):
    return _util.sip_pixelxy2xyzarr(sip, px, py, xyz)
sip_pixelxy2xyzarr = _util.sip_pixelxy2xyzarr

def sip_radec2pixelxy(sip, a, d, px, py):
    return _util.sip_radec2pixelxy(sip, a, d, px, py)
sip_radec2pixelxy = _util.sip_radec2pixelxy

def sip_radec2pixelxy_check(sip, ra, dec, px, py):
    return _util.sip_radec2pixelxy_check(sip, ra, dec, px, py)
sip_radec2pixelxy_check = _util.sip_radec2pixelxy_check

def sip_xyzarr2pixelxy(sip, xyz, px, py):
    return _util.sip_xyzarr2pixelxy(sip, xyz, px, py)
sip_xyzarr2pixelxy = _util.sip_xyzarr2pixelxy

def sip_xyz2pixelxy(sip, x, y, z, px, py):
    return _util.sip_xyz2pixelxy(sip, x, y, z, px, py)
sip_xyz2pixelxy = _util.sip_xyz2pixelxy

def sip_pixelxy2iwc(sip, px, py, iwcx, iwcy):
    return _util.sip_pixelxy2iwc(sip, px, py, iwcx, iwcy)
sip_pixelxy2iwc = _util.sip_pixelxy2iwc

def tan_det_cd(tan):
    return _util.tan_det_cd(tan)
tan_det_cd = _util.tan_det_cd

def sip_det_cd(sip):
    return _util.sip_det_cd(sip)
sip_det_cd = _util.sip_det_cd

def tan_pixel_scale(tn):
    return _util.tan_pixel_scale(tn)
tan_pixel_scale = _util.tan_pixel_scale

def sip_pixel_scale(sip):
    return _util.sip_pixel_scale(sip)
sip_pixel_scale = _util.sip_pixel_scale

def sip_calc_inv_distortion(sip, U, V, u, v):
    return _util.sip_calc_inv_distortion(sip, U, V, u, v)
sip_calc_inv_distortion = _util.sip_calc_inv_distortion

def sip_calc_distortion(sip, u, v, U, V):
    return _util.sip_calc_distortion(sip, u, v, U, V)
sip_calc_distortion = _util.sip_calc_distortion

def sip_pixel_distortion(sip, x, y):
    return _util.sip_pixel_distortion(sip, x, y)
sip_pixel_distortion = _util.sip_pixel_distortion

def sip_pixel_undistortion(sip, x, y):
    return _util.sip_pixel_undistortion(sip, x, y)
sip_pixel_undistortion = _util.sip_pixel_undistortion

def tan_pixelxy2xyzarr(tan, px, py, xyz):
    return _util.tan_pixelxy2xyzarr(tan, px, py, xyz)
tan_pixelxy2xyzarr = _util.tan_pixelxy2xyzarr

def tan_pixelxy2radec(wcs_tan, px, py):
    return _util.tan_pixelxy2radec(wcs_tan, px, py)
tan_pixelxy2radec = _util.tan_pixelxy2radec

def tan_pixelxy2radecarr(wcs_tan, px, py, radec):
    return _util.tan_pixelxy2radecarr(wcs_tan, px, py, radec)
tan_pixelxy2radecarr = _util.tan_pixelxy2radecarr

def tan_radec2pixelxy(wcs_tan, ra, dec, px, py):
    return _util.tan_radec2pixelxy(wcs_tan, ra, dec, px, py)
tan_radec2pixelxy = _util.tan_radec2pixelxy

def tan_xyzarr2pixelxy(wcs_tan, xyz, px, py):
    return _util.tan_xyzarr2pixelxy(wcs_tan, xyz, px, py)
tan_xyzarr2pixelxy = _util.tan_xyzarr2pixelxy

def tan_iwc2pixelxy(tan, iwcx, iwcy, px, py):
    return _util.tan_iwc2pixelxy(tan, iwcx, iwcy, px, py)
tan_iwc2pixelxy = _util.tan_iwc2pixelxy

def tan_iwc2xyzarr(tan, x, y, xyz):
    return _util.tan_iwc2xyzarr(tan, x, y, xyz)
tan_iwc2xyzarr = _util.tan_iwc2xyzarr

def tan_iwc2radec(tan, x, y):
    return _util.tan_iwc2radec(tan, x, y)
tan_iwc2radec = _util.tan_iwc2radec

def tan_pixelxy2iwc(tan, px, py, iwcx, iwcy):
    return _util.tan_pixelxy2iwc(tan, px, py, iwcx, iwcy)
tan_pixelxy2iwc = _util.tan_pixelxy2iwc

def tan_xyzarr2iwc(tan, xyz, iwcx, iwcy):
    return _util.tan_xyzarr2iwc(tan, xyz, iwcx, iwcy)
tan_xyzarr2iwc = _util.tan_xyzarr2iwc

def tan_radec2iwc(tan, ra, dec, iwcx, iwcy):
    return _util.tan_radec2iwc(tan, ra, dec, iwcx, iwcy)
tan_radec2iwc = _util.tan_radec2iwc

def sip_xyzarr2iwc(sip, xyz, iwcx, iwcy):
    return _util.sip_xyzarr2iwc(sip, xyz, iwcx, iwcy)
sip_xyzarr2iwc = _util.sip_xyzarr2iwc

def sip_radec2iwc(sip, ra, dec, iwcx, iwcy):
    return _util.sip_radec2iwc(sip, ra, dec, iwcx, iwcy)
sip_radec2iwc = _util.sip_radec2iwc

def sip_iwc2pixelxy(sip, iwcx, iwcy, px, py):
    return _util.sip_iwc2pixelxy(sip, iwcx, iwcy, px, py)
sip_iwc2pixelxy = _util.sip_iwc2pixelxy

def sip_iwc2radec(sip, x, y):
    return _util.sip_iwc2radec(sip, x, y)
sip_iwc2radec = _util.sip_iwc2radec

def sip_print(arg1):
    return _util.sip_print(arg1)
sip_print = _util.sip_print

def sip_print_to(arg1, fid):
    return _util.sip_print_to(arg1, fid)
sip_print_to = _util.sip_print_to

def tan_print(tan):
    return _util.tan_print(tan)
tan_print = _util.tan_print

def tan_print_to(tan, f):
    return _util.tan_print_to(tan, f)
tan_print_to = _util.tan_print_to

def sip_get_crval(sip):
    return _util.sip_get_crval(sip)
sip_get_crval = _util.sip_get_crval

def tan_get_orientation(tan):
    return _util.tan_get_orientation(tan)
tan_get_orientation = _util.tan_get_orientation

def sip_get_orientation(sip):
    return _util.sip_get_orientation(sip)
sip_get_orientation = _util.sip_get_orientation

def sip_get_image_size(hdr, pW, pH):
    return _util.sip_get_image_size(hdr, pW, pH)
sip_get_image_size = _util.sip_get_image_size

def sip_read_tan_or_sip_header_file_ext(fn, ext, dest, forcetan):
    return _util.sip_read_tan_or_sip_header_file_ext(fn, ext, dest, forcetan)
sip_read_tan_or_sip_header_file_ext = _util.sip_read_tan_or_sip_header_file_ext

def sip_create_header(sip):
    return _util.sip_create_header(sip)
sip_create_header = _util.sip_create_header

def tan_create_header(tan):
    return _util.tan_create_header(tan)
tan_create_header = _util.tan_create_header

def sip_add_to_header(hdr, sip):
    return _util.sip_add_to_header(hdr, sip)
sip_add_to_header = _util.sip_add_to_header

def tan_add_to_header(hdr, tan):
    return _util.tan_add_to_header(hdr, tan)
tan_add_to_header = _util.tan_add_to_header

def sip_read_header_file(fn, dest):
    return _util.sip_read_header_file(fn, dest)
sip_read_header_file = _util.sip_read_header_file

def sip_read_header_file_ext(fn, ext, dest):
    return _util.sip_read_header_file_ext(fn, ext, dest)
sip_read_header_file_ext = _util.sip_read_header_file_ext

def sip_read_header_file_ext_only(fn, ext, dest):
    return _util.sip_read_header_file_ext_only(fn, ext, dest)
sip_read_header_file_ext_only = _util.sip_read_header_file_ext_only

def tan_read_header_file(fn, dest):
    return _util.tan_read_header_file(fn, dest)
tan_read_header_file = _util.tan_read_header_file

def tan_read_header_file_ext(fn, ext, dest):
    return _util.tan_read_header_file_ext(fn, ext, dest)
tan_read_header_file_ext = _util.tan_read_header_file_ext

def tan_read_header_file_ext_only(fn, ext, dest):
    return _util.tan_read_header_file_ext_only(fn, ext, dest)
tan_read_header_file_ext_only = _util.tan_read_header_file_ext_only

def sip_read_header(hdr, dest):
    return _util.sip_read_header(hdr, dest)
sip_read_header = _util.sip_read_header

def tan_read_header(hdr, dest):
    return _util.tan_read_header(hdr, dest)
tan_read_header = _util.tan_read_header

def sip_from_string(str, len, dest):
    return _util.sip_from_string(str, len, dest)
sip_from_string = _util.sip_from_string

def tan_write_to(tan, fid):
    return _util.tan_write_to(tan, fid)
tan_write_to = _util.tan_write_to

def sip_write_to(sip, fid):
    return _util.sip_write_to(sip, fid)
sip_write_to = _util.sip_write_to

def sip_write_to_file(sip, fn):
    return _util.sip_write_to_file(sip, fn)
sip_write_to_file = _util.sip_write_to_file

def tan_write_to_file(tan, fn):
    return _util.tan_write_to_file(tan, fn)
tan_write_to_file = _util.tan_write_to_file

def wcs_pixel_center_for_size(size):
    return _util.wcs_pixel_center_for_size(size)
wcs_pixel_center_for_size = _util.wcs_pixel_center_for_size

def sip_ensure_inverse_polynomials(sip):
    return _util.sip_ensure_inverse_polynomials(sip)
sip_ensure_inverse_polynomials = _util.sip_ensure_inverse_polynomials

def sip_compute_inverse_polynomials(sip, NX, NY, xlo, xhi, ylo, yhi):
    return _util.sip_compute_inverse_polynomials(sip, NX, NY, xlo, xhi, ylo, yhi)
sip_compute_inverse_polynomials = _util.sip_compute_inverse_polynomials

def sip_filter_stars_in_field(sip, tan, xyz, radec, N, xy, inds, Ngood):
    return _util.sip_filter_stars_in_field(sip, tan, xyz, radec, N, xy, inds, Ngood)
sip_filter_stars_in_field = _util.sip_filter_stars_in_field

def sip_get_radec_bounds(wcs, stepsize):
    return _util.sip_get_radec_bounds(wcs, stepsize)
sip_get_radec_bounds = _util.sip_get_radec_bounds

def sip_walk_image_boundary(wcs, stepsize, callback, token):
    return _util.sip_walk_image_boundary(wcs, stepsize, callback, token)
sip_walk_image_boundary = _util.sip_walk_image_boundary

def sip_get_radec_center(wcs):
    return _util.sip_get_radec_center(wcs)
sip_get_radec_center = _util.sip_get_radec_center

def tan_get_radec_center(wcs):
    return _util.tan_get_radec_center(wcs)
tan_get_radec_center = _util.tan_get_radec_center

def sip_get_radius_deg(wcs):
    return _util.sip_get_radius_deg(wcs)
sip_get_radius_deg = _util.sip_get_radius_deg

def tan_get_radius_deg(wcs):
    return _util.tan_get_radius_deg(wcs)
tan_get_radius_deg = _util.tan_get_radius_deg

def sip_get_radec_center_hms(wcs, rah, ram, ras, decsign, decd, decm, decs):
    return _util.sip_get_radec_center_hms(wcs, rah, ram, ras, decsign, decd, decm, decs)
sip_get_radec_center_hms = _util.sip_get_radec_center_hms

def sip_pixel_is_inside_image(wcs, px, py):
    return _util.sip_pixel_is_inside_image(wcs, px, py)
sip_pixel_is_inside_image = _util.sip_pixel_is_inside_image

def sip_is_inside_image(wcs, ra, dec):
    return _util.sip_is_inside_image(wcs, ra, dec)
sip_is_inside_image = _util.sip_is_inside_image

def sip_get_radec_center_hms_string(wcs, rastr, decstr):
    return _util.sip_get_radec_center_hms_string(wcs, rastr, decstr)
sip_get_radec_center_hms_string = _util.sip_get_radec_center_hms_string

def sip_get_field_size(wcs, pw, ph, units):
    return _util.sip_get_field_size(wcs, pw, ph, units)
sip_get_field_size = _util.sip_get_field_size

def sip_shift(sipin, sipout, xlo, xhi, ylo, yhi):
    return _util.sip_shift(sipin, sipout, xlo, xhi, ylo, yhi)
sip_shift = _util.sip_shift

def tan_pixel_is_inside_image(wcs, px, py):
    return _util.tan_pixel_is_inside_image(wcs, px, py)
tan_pixel_is_inside_image = _util.tan_pixel_is_inside_image

def tan_is_inside_image(wcs, ra, dec):
    return _util.tan_is_inside_image(wcs, ra, dec)
tan_is_inside_image = _util.tan_is_inside_image

def tan_transform(tanin, tanout, xlo, xhi, ylo, yhi, scale):
    return _util.tan_transform(tanin, tanout, xlo, xhi, ylo, yhi, scale)
tan_transform = _util.tan_transform

def tan_scale(tanin, tanout, scale):
    return _util.tan_scale(tanin, tanout, scale)
tan_scale = _util.tan_scale

def sip_scale(tanin, tanout, scale):
    return _util.sip_scale(tanin, tanout, scale)
sip_scale = _util.sip_scale

def tan_rotate(tanin, tanout, rotate):
    return _util.tan_rotate(tanin, tanout, rotate)
tan_rotate = _util.tan_rotate


def sip_t_tostring(self):
    tan = self.wcstan
    ct = 'SIN' if tan.sin else 'TAN'
    return (('SIP(%s): crpix (%.1f, %.1f), crval (%g, %g), cd (%g, %g, %g, %g), '
             + 'image %g x %g; SIP orders A=%i, B=%i, AP=%i, BP=%i') %
            (ct, tan.crpix[0], tan.crpix[1], tan.crval[0], tan.crval[1],
             tan.cd[0], tan.cd[1], tan.cd[2], tan.cd[3],
             tan.imagew, tan.imageh, self.a_order, self.b_order,
             self.ap_order, self.bp_order))
sip_t.__str__ = sip_t_tostring

def sip_t_addtoheader(self, hdr):
    '''Adds this SIP WCS header to the given fitsio header'''
    self.wcstan.add_to_header(hdr)
    hdr.delete('CTYPE1')
    hdr.delete('CTYPE2')
    for k,v,c in [
        ('CTYPE1', 'RA---TAN-SIP', 'TANgent plane+SIP'),
        ('CTYPE2', 'DEC--TAN-SIP', 'TANgent plane+SIP'),
        ('A_ORDER', self.a_order, 'Polynomial order, axis 1'),
        ('B_ORDER', self.b_order, 'Polynomial order, axis 2'),
        ('AP_ORDER', self.ap_order, 'Inv.polynomial order, axis 1'),
        ('BP_ORDER', self.bp_order, 'Inv.polynomial order, axis 2'),
        ]:
        hdr.add_record(dict(name=k, value=v, comment=c))
    for i in range(self.a_order + 1):
        for j in range(self.a_order + 1):
#if i + j < 1:
# drop linear (CD) terms
            if i + j < 2:
                continue
            if i + j > self.a_order:
                continue
            hdr.add_record(dict(name='A_%i_%i' % (i,j), value=self.get_a_term(i, j),
                                comment='SIP polynomial term'))
    for i in range(self.b_order + 1):
        for j in range(self.b_order + 1):
#if i + j < 1:
# drop linear (CD) terms
            if i + j < 2:
                continue
            if i + j > self.b_order:
                continue
            hdr.add_record(dict(name='B_%i_%i' % (i,j), value=self.get_b_term(i, j),
                                comment='SIP polynomial term'))
    for i in range(self.ap_order + 1):
        for j in range(self.ap_order + 1):
            if i + j < 1:
                continue
            if i + j > self.ap_order:
                continue
            hdr.add_record(dict(name='AP_%i_%i' % (i,j), value=self.get_ap_term(i, j),
                                comment='SIP polynomial term'))
    for i in range(self.bp_order + 1):
        for j in range(self.bp_order + 1):
            if i + j < 1:
                continue
            if i + j > self.bp_order:
                continue
            hdr.add_record(dict(name='BP_%i_%i' % (i,j), value=self.get_bp_term(i, j),
                                comment='SIP polynomial term'))
sip_t.add_to_header = sip_t_addtoheader


# def sip_t_get_subimage(self, x0, y0, w, h):
#     wcs2 = sip_t(self)
#     cpx,cpy = wcs2.crpix
#     wcs2.set_crpix((cpx - x0, cpy - y0))
#     wcs2.set_width(float(w))
#     wcs2.set_height(float(h))
#     return wcs2
# sip_t.get_subimage = sip_t_get_subimage

def sip_t_get_shape(self):
    return (self.wcstan.imageh, self.wcstan.imagew)
sip_t.get_shape = sip_t_get_shape

def sip_t_set_shape(self, S):
    H,W = S
    self.set_height(H)
    self.set_width(W)
sip_t.set_shape = sip_t_set_shape

sip_t.imagew = property(sip_t.get_width,  sip_t.set_width,  None, 'image width')
sip_t.imageh = property(sip_t.get_height, sip_t.set_height, None, 'image height')
sip_t.shape = property(sip_t.get_shape, sip_t.set_shape, None, 'image shape')

def sip_t_get_cd(self):
    cd = self.wcstan.cd
    return (cd[0], cd[1], cd[2], cd[3])
def sip_t_set_cd(self, x):
    self.wcstan.cd = x
sip_t.get_cd = sip_t_get_cd
sip_t.set_cd = sip_t_set_cd

def sip_t_get_crval(self):
    return self.wcstan.crval
def sip_t_set_crval(self, x):
    self.wcstan.crval = x
sip_t.get_crval = sip_t_get_crval
sip_t.set_crval = sip_t_set_crval

def sip_t_get_crpix(self):
    return self.wcstan.crpix
def sip_t_set_crpix(self, x):
    self.wcstan.crpix = x
sip_t.get_crpix = sip_t_get_crpix
sip_t.set_crpix = sip_t_set_crpix

sip_t.crval = property(sip_t_get_crval, sip_t_set_crval, None, 'CRVAL')
sip_t.crpix = property(sip_t_get_crpix, sip_t_set_crpix, None, 'CRPIX')
sip_t.cd    = property(sip_t_get_cd   , sip_t_set_cd,    None, 'CD')


def sip_t_radec_bounds(self):
# W,H = self.wcstan.imagew, self.wcstan.imageh
# r,d = self.pixelxy2radec([1, W, W, 1], [1, 1, H, H])
# return (r.min(), r.max(), d.min(), d.max())
    W,H = self.imagew, self.imageh
    r,d = self.pixelxy2radec([1, W/2, W, W, W, W/2, 1, 1], [1, 1, 1, H/2, H, H, H, H/2])
    rx = r.max()
    rn = r.min()
# ugh, RA wrap-around.  We find the largest value < 180 (ie, near zero) and smallest value > 180 (ie, near 360)
# and report them with ralo > rahi so that this case can be identified
    if rx - rn > 180:
        rx = r[r < 180].max()
        rn = r[r > 180].min()
    return (rn, rx, d.min(), d.max())
sip_t.radec_bounds = sip_t_radec_bounds

#def sip_t_fromstring(s):
#   sip = sip_from_string(s, len(s),

_real_sip_t_init = sip_t.__init__
def my_sip_t_init(self, *args, **kwargs):
# fitsio header: check for '.records()' function.
    if len(args) == 1 and hasattr(args[0], 'records'):
        try:
            hdr = args[0]
            qhdr = fitsio_to_qfits_header(hdr)
            args = [qhdr]
        except:
            pass

    _real_sip_t_init(self, *args, **kwargs)
    if self.this is None:
        raise RuntimeError('Duck punch!')
sip_t.__init__ = my_sip_t_init


Sip = sip_t


def coadd_add_numpy(c, py_img, py_weight, fweight, wcs):
    return _util.coadd_add_numpy(c, py_img, py_weight, fweight, wcs)
coadd_add_numpy = _util.coadd_add_numpy

def coadd_get_snapshot_numpy(co, badpix):
    return _util.coadd_get_snapshot_numpy(co, badpix)
coadd_get_snapshot_numpy = _util.coadd_get_snapshot_numpy

def fit_sip_wcs_py(py_starxyz, py_fieldxy, py_weights, tanin, sip_order, inv_order):
    return _util.fit_sip_wcs_py(py_starxyz, py_fieldxy, py_weights, tanin, sip_order, inv_order)
fit_sip_wcs_py = _util.fit_sip_wcs_py

def broadcast_2to2ok(func, baton, in1, in2):
    return _util.broadcast_2to2ok(func, baton, in1, in2)
broadcast_2to2ok = _util.broadcast_2to2ok

def broadcast_2to2(func, baton, in1, in2):
    return _util.broadcast_2to2(func, baton, in1, in2)
broadcast_2to2 = _util.broadcast_2to2

def broadcast_2to2i(func, baton, in1, in2):
    return _util.broadcast_2to2i(func, baton, in1, in2)
broadcast_2to2i = _util.broadcast_2to2i

def tan_rd2xy_wrapper(wcs, in1, in2):
    return _util.tan_rd2xy_wrapper(wcs, in1, in2)
tan_rd2xy_wrapper = _util.tan_rd2xy_wrapper

def sip_rd2xy_wrapper(wcs, in1, in2):
    return _util.sip_rd2xy_wrapper(wcs, in1, in2)
sip_rd2xy_wrapper = _util.sip_rd2xy_wrapper

def anwcs_rd2xy_wrapper(wcs, in1, in2):
    return _util.anwcs_rd2xy_wrapper(wcs, in1, in2)
anwcs_rd2xy_wrapper = _util.anwcs_rd2xy_wrapper

def tan_iwc2xy_wrapper(wcs, in1, in2):
    return _util.tan_iwc2xy_wrapper(wcs, in1, in2)
tan_iwc2xy_wrapper = _util.tan_iwc2xy_wrapper

def sip_iwc2xy_wrapper(wcs, in1, in2):
    return _util.sip_iwc2xy_wrapper(wcs, in1, in2)
sip_iwc2xy_wrapper = _util.sip_iwc2xy_wrapper

def tan_xy2iwc_wrapper(wcs, in1, in2):
    return _util.tan_xy2iwc_wrapper(wcs, in1, in2)
tan_xy2iwc_wrapper = _util.tan_xy2iwc_wrapper

def sip_xy2iwc_wrapper(wcs, in1, in2):
    return _util.sip_xy2iwc_wrapper(wcs, in1, in2)
sip_xy2iwc_wrapper = _util.sip_xy2iwc_wrapper

def tan_iwc2rd_wrapper(wcs, in1, in2):
    return _util.tan_iwc2rd_wrapper(wcs, in1, in2)
tan_iwc2rd_wrapper = _util.tan_iwc2rd_wrapper

def sip_iwc2rd_wrapper(wcs, in1, in2):
    return _util.sip_iwc2rd_wrapper(wcs, in1, in2)
sip_iwc2rd_wrapper = _util.sip_iwc2rd_wrapper

def tan_rd2iwc_wrapper(wcs, in1, in2):
    return _util.tan_rd2iwc_wrapper(wcs, in1, in2)
tan_rd2iwc_wrapper = _util.tan_rd2iwc_wrapper

def sip_rd2iwc_wrapper(wcs, in1, in2):
    return _util.sip_rd2iwc_wrapper(wcs, in1, in2)
sip_rd2iwc_wrapper = _util.sip_rd2iwc_wrapper

def tan_xy2rd_wrapper(wcs, in1, in2):
    return _util.tan_xy2rd_wrapper(wcs, in1, in2)
tan_xy2rd_wrapper = _util.tan_xy2rd_wrapper

def sip_xy2rd_wrapper(wcs, in1, in2):
    return _util.sip_xy2rd_wrapper(wcs, in1, in2)
sip_xy2rd_wrapper = _util.sip_xy2rd_wrapper

def anwcs_xy2rd_wrapper(wcs, in1, in2):
    return _util.anwcs_xy2rd_wrapper(wcs, in1, in2)
anwcs_xy2rd_wrapper = _util.anwcs_xy2rd_wrapper

def tan_wcs_resample(inwcs, outwcs, py_inimg, py_outimg, weighted, lorder):
    return _util.tan_wcs_resample(inwcs, outwcs, py_inimg, py_outimg, weighted, lorder)
tan_wcs_resample = _util.tan_wcs_resample

def tan_numpy_xyz2pixelxy(tan, npxyz, npx, npy):
    return _util.tan_numpy_xyz2pixelxy(tan, npxyz, npx, npy)
tan_numpy_xyz2pixelxy = _util.tan_numpy_xyz2pixelxy

def an_tally(py_counts, py_x, py_y):
    return _util.an_tally(py_counts, py_x, py_y)
an_tally = _util.an_tally

import numpy as np

def tan_t_tostring(self):
    ct = 'SIN' if self.sin else 'TAN'
    return ('%s: crpix (%.1f, %.1f), crval (%g, %g), cd (%g, %g, %g, %g), image %g x %g' %
            (ct, self.crpix[0], self.crpix[1], self.crval[0], self.crval[1],
             self.cd[0], self.cd[1], self.cd[2], self.cd[3],
             self.imagew, self.imageh))
tan_t.__str__ = tan_t_tostring

def tan_t_addtoheader(self, hdr):
    '''Adds this TAN WCS header to the given fitsio header'''
    hdr.add_record(dict(name='CTYPE1', value='RA---TAN', comment='TANgent plane'))
    hdr.add_record(dict(name='CTYPE2', value='DEC--TAN', comment='TANgent plane'))
    hdr.add_record(dict(name='CRVAL1', value=self.crval[0], comment='Reference RA'))
    hdr.add_record(dict(name='CRVAL2', value=self.crval[1], comment='Reference Dec'))
    hdr.add_record(dict(name='CRPIX1', value=self.crpix[0], comment='Reference x'))
    hdr.add_record(dict(name='CRPIX2', value=self.crpix[1], comment='Reference y'))
    hdr.add_record(dict(name='CD1_1', value=self.cd[0], comment='CD matrix'))
    hdr.add_record(dict(name='CD1_2', value=self.cd[1], comment='CD matrix'))
    hdr.add_record(dict(name='CD2_1', value=self.cd[2], comment='CD matrix'))
    hdr.add_record(dict(name='CD2_2', value=self.cd[3], comment='CD matrix'))
    hdr.add_record(dict(name='IMAGEW', value=self.imagew, comment='Image width'))
    hdr.add_record(dict(name='IMAGEH', value=self.imageh, comment='Image height'))
tan_t.add_to_header = tan_t_addtoheader

## picklable?
def tan_t_getstate(self):
    return (self.crpix[0], self.crpix[1], self.crval[0], self.crval[1],
            self.cd[0], self.cd[1], self.cd[2], self.cd[3],
            self.imagew, self.imageh, self.sin)
def tan_t_setstate(self, state):
#print 'setstate: self', self, 'state', state
#print 'state', state
    self.this = _util.new_tan_t()
#print 'self', repr(self)
    p0,p1,v0,v1,cd0,cd1,cd2,cd3,w,h,sin = state
    self.set_crpix(p0,p1)
    self.set_crval(v0,v1)
    self.set_cd(cd0,cd1,cd2,cd3)
    self.set_imagesize(w,h)
    self.sin = sin
#(self.crpix[0], self.crpix[1], self.crval[0], self.crval[1],
#self.cd[0], self.cd[1], self.cd[2], self.cd[3],
#self.imagew, self.imageh) = state
def tan_t_getnewargs(self):
    return ()
tan_t.__getstate__ = tan_t_getstate
tan_t.__setstate__ = tan_t_setstate
tan_t.__getnewargs__ = tan_t_getnewargs

def tan_t_getshape(self):
    return int(self.imageh), int(self.imagew)

tan_t.shape = property(tan_t_getshape)

def tan_t_get_cd(self):
    cd = self.cd
    return (cd[0], cd[1], cd[2], cd[3])
tan_t.get_cd = tan_t_get_cd

def tan_t_pixelxy2radec(self, x, y):
    return tan_xy2rd_wrapper(self.this, x, y)
tan_t.pixelxy2radec_single = tan_t.pixelxy2radec
tan_t.pixelxy2radec = tan_t_pixelxy2radec

def tan_t_radec2pixelxy(self, r, d):
    return tan_rd2xy_wrapper(self.this, r, d)
tan_t.radec2pixelxy_single = tan_t.radec2pixelxy
tan_t.radec2pixelxy = tan_t_radec2pixelxy

def tan_t_iwc2pixelxy(self, r, d):
    return tan_iwc2xy_wrapper(self.this, r, d)
tan_t.iwc2pixelxy_single = tan_t.iwc2pixelxy
tan_t.iwc2pixelxy = tan_t_iwc2pixelxy

def tan_t_pixelxy2iwc(self, x,y):
    return tan_xy2iwc_wrapper(self.this, x,y)
tan_t.pixelxy2iwc_single = tan_t.pixelxy2iwc
tan_t.pixelxy2iwc = tan_t_pixelxy2iwc

def tan_t_radec2iwc(self, r, d):
    return tan_rd2iwc_wrapper(self.this, r, d)
tan_t.radec2iwc_single = tan_t.radec2iwc
tan_t.radec2iwc = tan_t_radec2iwc

def tan_t_iwc2radec(self, u, v):
    return tan_iwc2rd_wrapper(self.this, u, v)
tan_t.iwc2radec_single = tan_t.iwc2radec
tan_t.iwc2radec = tan_t_iwc2radec

def sip_t_pixelxy2radec(self, x, y):
    return sip_xy2rd_wrapper(self.this, x, y)
sip_t.pixelxy2radec_single = sip_t.pixelxy2radec
sip_t.pixelxy2radec = sip_t_pixelxy2radec

def sip_t_radec2pixelxy(self, r, d):
    return sip_rd2xy_wrapper(self.this, r, d)
sip_t.radec2pixelxy_single = sip_t.radec2pixelxy
sip_t.radec2pixelxy = sip_t_radec2pixelxy

def sip_t_iwc2pixelxy(self, r, d):
    return sip_iwc2xy_wrapper(self.this, r, d)
sip_t.iwc2pixelxy_single = sip_t.iwc2pixelxy
sip_t.iwc2pixelxy = sip_t_iwc2pixelxy

def sip_t_pixelxy2iwc(self, x,y):
    return sip_xy2iwc_wrapper(self.this, x,y)
sip_t.pixelxy2iwc_single = sip_t.pixelxy2iwc
sip_t.pixelxy2iwc = sip_t_pixelxy2iwc

def sip_t_radec2iwc(self, r, d):
    return sip_rd2iwc_wrapper(self.this, r, d)
sip_t.radec2iwc_single = sip_t.radec2iwc
sip_t.radec2iwc = sip_t_radec2iwc

def sip_t_iwc2radec(self, u, v):
    return sip_iwc2rd_wrapper(self.this, u, v)
sip_t.iwc2radec_single = sip_t.iwc2radec
sip_t.iwc2radec = sip_t_iwc2radec


def anwcs_t_pixelxy2radec(self, x, y):
    ok,r,d =  anwcs_xy2rd_wrapper(self.this, x, y)
    return (ok == 0),r,d
anwcs_t.pixelxy2radec_single = anwcs_t.pixelxy2radec
anwcs_t.pixelxy2radec = anwcs_t_pixelxy2radec

def anwcs_t_radec2pixelxy(self, r, d):
    ok,x,y =  anwcs_rd2xy_wrapper(self.this, r, d)
    return (ok == 0),x,y
anwcs_t.radec2pixelxy_single = anwcs_t.radec2pixelxy
anwcs_t.radec2pixelxy = anwcs_t_radec2pixelxy

def tan_t_radec_bounds(self):
    W,H = self.imagew, self.imageh
    r,d = self.pixelxy2radec([1, W/2, W, W, W, W/2, 1, 1], [1, 1, 1, H/2, H, H, H, H/2])
    rx = r.max()
    rn = r.min()
# ugh, RA wrap-around.  We find the largest value < 180 (ie, near zero) and smallest value > 180 (ie, near 360)
# and report them with ralo > rahi so that this case can be identified
    if rx - rn > 180:
        rx = r[r < 180].max()
        rn = r[r > 180].min()
    return (rn, rx, d.min(), d.max())
tan_t.radec_bounds = tan_t_radec_bounds

_real_tan_t_init = tan_t.__init__
def my_tan_t_init(self, *args, **kwargs):
# fitsio header: check for '.records()' function.
    if len(args) == 1 and hasattr(args[0], 'records'):
        try:
            hdr = args[0]
            qhdr = fitsio_to_qfits_header(hdr)
            args = [qhdr]
        except:
            pass

    _real_tan_t_init(self, *args, **kwargs)
    if self.this is None:
        raise RuntimeError('Duck punch!')
tan_t.__init__ = my_tan_t_init

Tan = tan_t

def tan_t_get_subimage(self, x0, y0, w, h):
    wcs2 = tan_t(self)
    cpx,cpy = wcs2.crpix
    wcs2.set_crpix(cpx - x0, cpy - y0)
    wcs2.set_width(float(w))
    wcs2.set_height(float(h))
    return wcs2
tan_t.get_subimage = tan_t_get_subimage

# Deja Vu!
# def sip_t_get_subimage(self, xlo, xhi, ylo, yhi):
#     sipout = sip_t(self)
#     sip_shift(self.this, sipout.this, float(xlo), float(xhi), float(ylo), float(yhi))
#     return sipout
# sip_t.get_subimage = sip_t_get_subimage

# picklable
def sip_t_getstate(self):
    t = (self.wcstan.__getstate__(),
         self.a_order, self.b_order, self.a, self.b,
         self.ap_order, self.bp_order, self.ap, self.bp)
    return t

def sip_t_setstate(self, s):
    self.this = _util.new_sip_t()
    (t, self.a_order, self.b_order, self.a, self.b,
     self.ap_order, self.bp_order, self.ap, self.bp) = s
#self.wcstan.__setstate__(t)
# disturbingly, tan_t_setstate does not work because it resets self.this = ...
    p0,p1,v0,v1,cd0,cd1,cd2,cd3,w,h,sin = t
    self.wcstan.set_crpix(p0,p1)
    self.wcstan.set_crval(v0,v1)
    self.wcstan.set_cd(cd0,cd1,cd2,cd3)
    self.wcstan.set_imagesize(w,h)
    self.wcstan.sin = sin

def sip_t_getnewargs(self):
    return ()

sip_t.__getstate__ = sip_t_getstate
sip_t.__setstate__ = sip_t_setstate
sip_t.__getnewargs__ = sip_t_getnewargs



def fits_use_error_system():
    return _util.fits_use_error_system()
fits_use_error_system = _util.fits_use_error_system

def fits_to_string(hdr, size):
    return _util.fits_to_string(hdr, size)
fits_to_string = _util.fits_to_string

def fits_write_float_image(img, nx, ny, fn):
    return _util.fits_write_float_image(img, nx, ny, fn)
fits_write_float_image = _util.fits_write_float_image

def fits_write_u8_image(img, nx, ny, fn):
    return _util.fits_write_u8_image(img, nx, ny, fn)
fits_write_u8_image = _util.fits_write_u8_image

def fits_write_i16_image(img, nx, ny, fn):
    return _util.fits_write_i16_image(img, nx, ny, fn)
fits_write_i16_image = _util.fits_write_i16_image

def fits_get_header_for_image(qd, W, addtoheader):
    return _util.fits_get_header_for_image(qd, W, addtoheader)
fits_get_header_for_image = _util.fits_get_header_for_image

def fits_get_header_for_image2(W, H, bitpix, addtoheader):
    return _util.fits_get_header_for_image2(W, H, bitpix, addtoheader)
fits_get_header_for_image2 = _util.fits_get_header_for_image2

def fits_get_header_for_image3(W, H, bitpix, planes, addtoheader):
    return _util.fits_get_header_for_image3(W, H, bitpix, planes, addtoheader)
fits_get_header_for_image3 = _util.fits_get_header_for_image3

def fits_write_header(hdr, filename):
    return _util.fits_write_header(hdr, filename)
fits_write_header = _util.fits_write_header

def fits_write_header_and_image(hdr, qd, W):
    return _util.fits_write_header_and_image(hdr, qd, W)
fits_write_header_and_image = _util.fits_write_header_and_image

def fits_get_double_val(table, column, rowdata):
    return _util.fits_get_double_val(table, column, rowdata)
fits_get_double_val = _util.fits_get_double_val

def fits_is_table_header(keyword):
    return _util.fits_is_table_header(keyword)
fits_is_table_header = _util.fits_is_table_header

def fits_is_primary_header(key):
    return _util.fits_is_primary_header(key)
fits_is_primary_header = _util.fits_is_primary_header

def fits_copy_non_table_headers(dest, src):
    return _util.fits_copy_non_table_headers(dest, src)
fits_copy_non_table_headers = _util.fits_copy_non_table_headers

def fits_get_dupstring(hdr, key):
    return _util.fits_get_dupstring(hdr, key)
fits_get_dupstring = _util.fits_get_dupstring

def fits_get_long_string(hdr, key):
    return _util.fits_get_long_string(hdr, key)
fits_get_long_string = _util.fits_get_long_string

def fits_header_addf(hdr, key, comment, format):
    return _util.fits_header_addf(hdr, key, comment, format)
fits_header_addf = _util.fits_header_addf

def fits_header_addf_longstring(hdr, key, comment, format):
    return _util.fits_header_addf_longstring(hdr, key, comment, format)
fits_header_addf_longstring = _util.fits_header_addf_longstring

def fits_header_add_longstring_boilerplate(hdr):
    return _util.fits_header_add_longstring_boilerplate(hdr)
fits_header_add_longstring_boilerplate = _util.fits_header_add_longstring_boilerplate

def fits_header_modf(hdr, key, comment, format):
    return _util.fits_header_modf(hdr, key, comment, format)
fits_header_modf = _util.fits_header_modf

def fits_header_add_int(hdr, key, val, comment):
    return _util.fits_header_add_int(hdr, key, val, comment)
fits_header_add_int = _util.fits_header_add_int

def fits_header_add_double(hdr, key, val, comment):
    return _util.fits_header_add_double(hdr, key, val, comment)
fits_header_add_double = _util.fits_header_add_double

def fits_header_set_double(hdr, key, val, comment):
    return _util.fits_header_set_double(hdr, key, val, comment)
fits_header_set_double = _util.fits_header_set_double

def fits_header_set_int(hdr, key, val, comment):
    return _util.fits_header_set_int(hdr, key, val, comment)
fits_header_set_int = _util.fits_header_set_int

def fits_header_mod_int(hdr, key, val, comment):
    return _util.fits_header_mod_int(hdr, key, val, comment)
fits_header_mod_int = _util.fits_header_mod_int

def fits_header_mod_double(hdr, key, val, comment):
    return _util.fits_header_mod_double(hdr, key, val, comment)
fits_header_mod_double = _util.fits_header_mod_double

def fits_update_value(hdr, key, newvalue):
    return _util.fits_update_value(hdr, key, newvalue)
fits_update_value = _util.fits_update_value

def fits_copy_table(tbl):
    return _util.fits_copy_table(tbl)
fits_copy_table = _util.fits_copy_table

def an_fits_copy_header(src, dest, key):
    return _util.an_fits_copy_header(src, dest, key)
an_fits_copy_header = _util.an_fits_copy_header

def fits_copy_all_headers(src, dest, targetkey):
    return _util.fits_copy_all_headers(src, dest, targetkey)
fits_copy_all_headers = _util.fits_copy_all_headers

def fits_append_all_headers(src, dest, targetkey):
    return _util.fits_append_all_headers(src, dest, targetkey)
fits_append_all_headers = _util.fits_append_all_headers

def fits_add_args(src, args, argc):
    return _util.fits_add_args(src, args, argc)
fits_add_args = _util.fits_add_args

def fits_add_long_comment(dst, format):
    return _util.fits_add_long_comment(dst, format)
fits_add_long_comment = _util.fits_add_long_comment

def fits_append_long_comment(dst, format):
    return _util.fits_append_long_comment(dst, format)
fits_append_long_comment = _util.fits_append_long_comment

def fits_add_long_history(dst, format):
    return _util.fits_add_long_history(dst, format)
fits_add_long_history = _util.fits_add_long_history

def fits_blocks_needed(size):
    return _util.fits_blocks_needed(size)
fits_blocks_needed = _util.fits_blocks_needed

def fits_bytes_needed(size):
    return _util.fits_bytes_needed(size)
fits_bytes_needed = _util.fits_bytes_needed

def fits_pad_file_with(fid, pad):
    return _util.fits_pad_file_with(fid, pad)
fits_pad_file_with = _util.fits_pad_file_with

def fits_pad_file(fid):
    return _util.fits_pad_file(fid)
fits_pad_file = _util.fits_pad_file

def fits_pad_file_name(filename):
    return _util.fits_pad_file_name(filename)
fits_pad_file_name = _util.fits_pad_file_name

def fits_fill_endian_string(str):
    return _util.fits_fill_endian_string(str)
fits_fill_endian_string = _util.fits_fill_endian_string

def fits_get_endian_string():
    return _util.fits_get_endian_string()
fits_get_endian_string = _util.fits_get_endian_string

def fits_check_endian(header):
    return _util.fits_check_endian(header)
fits_check_endian = _util.fits_check_endian

def fits_check_uint_size(header):
    return _util.fits_check_uint_size(header)
fits_check_uint_size = _util.fits_check_uint_size

def fits_check_double_size(header):
    return _util.fits_check_double_size(header)
fits_check_double_size = _util.fits_check_double_size

def fits_add_endian(header):
    return _util.fits_add_endian(header)
fits_add_endian = _util.fits_add_endian

def fits_add_reverse_endian(header):
    return _util.fits_add_reverse_endian(header)
fits_add_reverse_endian = _util.fits_add_reverse_endian

def fits_mod_reverse_endian(header):
    return _util.fits_mod_reverse_endian(header)
fits_mod_reverse_endian = _util.fits_mod_reverse_endian

def fits_add_uint_size(header):
    return _util.fits_add_uint_size(header)
fits_add_uint_size = _util.fits_add_uint_size

def fits_add_double_size(header):
    return _util.fits_add_double_size(header)
fits_add_double_size = _util.fits_add_double_size

def fits_find_column(table, colname):
    return _util.fits_find_column(table, colname)
fits_find_column = _util.fits_find_column

def fits_find_table_column(fn, colname, start, size, extension):
    return _util.fits_find_table_column(fn, colname, start, size, extension)
fits_find_table_column = _util.fits_find_table_column

def fits_get_table_column(fn, colname, pcol):
    return _util.fits_get_table_column(fn, colname, pcol)
fits_get_table_column = _util.fits_get_table_column

def fits_add_column(table, column, type, ncopies, units, label):
    return _util.fits_add_column(table, column, type, ncopies, units, label)
fits_add_column = _util.fits_add_column

def fits_offset_of_column(table, colnum):
    return _util.fits_offset_of_column(table, colnum)
fits_offset_of_column = _util.fits_offset_of_column

def fits_write_data_A(fid, value):
    return _util.fits_write_data_A(fid, value)
fits_write_data_A = _util.fits_write_data_A

def fits_write_data_B(fid, value):
    return _util.fits_write_data_B(fid, value)
fits_write_data_B = _util.fits_write_data_B

def fits_write_data_D(fid, value, flip):
    return _util.fits_write_data_D(fid, value, flip)
fits_write_data_D = _util.fits_write_data_D

def fits_write_data_E(fid, value, flip):
    return _util.fits_write_data_E(fid, value, flip)
fits_write_data_E = _util.fits_write_data_E

def fits_write_data_I(fid, value, flip):
    return _util.fits_write_data_I(fid, value, flip)
fits_write_data_I = _util.fits_write_data_I

def fits_write_data_J(fid, value, flip):
    return _util.fits_write_data_J(fid, value, flip)
fits_write_data_J = _util.fits_write_data_J

def fits_write_data_K(fid, value, flip):
    return _util.fits_write_data_K(fid, value, flip)
fits_write_data_K = _util.fits_write_data_K

def fits_write_data_L(fid, value):
    return _util.fits_write_data_L(fid, value)
fits_write_data_L = _util.fits_write_data_L

def fits_write_data_X(fid, value):
    return _util.fits_write_data_X(fid, value)
fits_write_data_X = _util.fits_write_data_X

def fits_write_data(fid, pvalue, type, flip):
    return _util.fits_write_data(fid, pvalue, type, flip)
fits_write_data = _util.fits_write_data

def fits_write_data_array(fid, vvalue, type, N, flip):
    return _util.fits_write_data_array(fid, vvalue, type, N, flip)
fits_write_data_array = _util.fits_write_data_array

def collapsing_find_minlabel(label, equivs):
    return _util.collapsing_find_minlabel(label, equivs)
collapsing_find_minlabel = _util.collapsing_find_minlabel

def dfind2(image, nx, ny, objectimg, p_nobjects):
    return _util.dfind2(image, nx, ny, objectimg, p_nobjects)
dfind2 = _util.dfind2

def dfind2_u8(image, nx, ny, objectimg, p_nobjects):
    return _util.dfind2_u8(image, nx, ny, objectimg, p_nobjects)
dfind2_u8 = _util.dfind2_u8

def dselip(k, n, arr):
    return _util.dselip(k, n, arr)
dselip = _util.dselip

def dselip_cleanup():
    return _util.dselip_cleanup()
dselip_cleanup = _util.dselip_cleanup

def dsmooth(image, nx, ny, sigma, smooth):
    return _util.dsmooth(image, nx, ny, sigma, smooth)
dsmooth = _util.dsmooth

def dsmooth2(image, nx, ny, sigma, smooth):
    return _util.dsmooth2(image, nx, ny, sigma, smooth)
dsmooth2 = _util.dsmooth2

def dsmooth2_u8(image, nx, ny, sigma, smooth):
    return _util.dsmooth2_u8(image, nx, ny, sigma, smooth)
dsmooth2_u8 = _util.dsmooth2_u8

def dsmooth2_i16(image, nx, ny, sigma, smooth):
    return _util.dsmooth2_i16(image, nx, ny, sigma, smooth)
dsmooth2_i16 = _util.dsmooth2_i16

def dobjects(image, nx, ny, limit, dpsf, objects):
    return _util.dobjects(image, nx, ny, limit, dpsf, objects)
dobjects = _util.dobjects

def dmask(image, nx, ny, limit, dpsf, mask):
    return _util.dmask(image, nx, ny, limit, dpsf, mask)
dmask = _util.dmask

def dpeaks(image, nx, ny, npeaks, xcen, ycen, sigma, dlim, saddle, maxnpeaks, smooth, checkpeaks, minpeak):
    return _util.dpeaks(image, nx, ny, npeaks, xcen, ycen, sigma, dlim, saddle, maxnpeaks, smooth, checkpeaks, minpeak)
dpeaks = _util.dpeaks

def dcen3x3(image):
    return _util.dcen3x3(image)
dcen3x3 = _util.dcen3x3

def dsigma(image, nx, ny, sp, gridsize, sigma):
    return _util.dsigma(image, nx, ny, sp, gridsize, sigma)
dsigma = _util.dsigma

def dsigma_u8(image, nx, ny, sp, gridsize, sigma):
    return _util.dsigma_u8(image, nx, ny, sp, gridsize, sigma)
dsigma_u8 = _util.dsigma_u8

def dmedsmooth(image, masked, nx, ny, halfbox, smooth):
    return _util.dmedsmooth(image, masked, nx, ny, halfbox, smooth)
dmedsmooth = _util.dmedsmooth

def dallpeaks(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize):
    return _util.dallpeaks(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize)
dallpeaks = _util.dallpeaks

def dallpeaks_u8(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize):
    return _util.dallpeaks_u8(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize)
dallpeaks_u8 = _util.dallpeaks_u8

def dallpeaks_i16(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize):
    return _util.dallpeaks_i16(image, nx, ny, objects, npeaks, dpsf, sigma, dlim, saddle, maxper, maxnpeaks, minpeak, maxsize)
dallpeaks_i16 = _util.dallpeaks_i16

def dcen3x3b(i0, i1, i2, i3, i4, i5, i6, i7, i8):
    return _util.dcen3x3b(i0, i1, i2, i3, i4, i5, i6, i7, i8)
dcen3x3b = _util.dcen3x3b
# This file is compatible with both classic and new-style classes.


