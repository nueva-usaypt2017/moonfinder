# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_plotstuff_c')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_plotstuff_c')
    _plotstuff_c = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_plotstuff_c', [dirname(__file__)])
        except ImportError:
            import _plotstuff_c
            return _plotstuff_c
        try:
            _mod = imp.load_module('_plotstuff_c', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _plotstuff_c = swig_import_helper()
    del swig_import_helper
else:
    import _plotstuff_c
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import astrometry.util.util
PLOTSTUFF_FORMAT_JPG = _plotstuff_c.PLOTSTUFF_FORMAT_JPG
PLOTSTUFF_FORMAT_PNG = _plotstuff_c.PLOTSTUFF_FORMAT_PNG
PLOTSTUFF_FORMAT_PPM = _plotstuff_c.PLOTSTUFF_FORMAT_PPM
PLOTSTUFF_FORMAT_PDF = _plotstuff_c.PLOTSTUFF_FORMAT_PDF
PLOTSTUFF_FORMAT_MEMIMG = _plotstuff_c.PLOTSTUFF_FORMAT_MEMIMG
PLOTSTUFF_FORMAT_FITS = _plotstuff_c.PLOTSTUFF_FORMAT_FITS
class plot_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plot_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plot_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plotters"] = _plotstuff_c.plot_args_plotters_set
    __swig_getmethods__["plotters"] = _plotstuff_c.plot_args_plotters_get
    if _newclass:
        plotters = _swig_property(_plotstuff_c.plot_args_plotters_get, _plotstuff_c.plot_args_plotters_set)
    __swig_setmethods__["NP"] = _plotstuff_c.plot_args_NP_set
    __swig_getmethods__["NP"] = _plotstuff_c.plot_args_NP_get
    if _newclass:
        NP = _swig_property(_plotstuff_c.plot_args_NP_get, _plotstuff_c.plot_args_NP_set)
    __swig_setmethods__["outfn"] = _plotstuff_c.plot_args_outfn_set
    __swig_getmethods__["outfn"] = _plotstuff_c.plot_args_outfn_get
    if _newclass:
        outfn = _swig_property(_plotstuff_c.plot_args_outfn_get, _plotstuff_c.plot_args_outfn_set)
    __swig_setmethods__["fout"] = _plotstuff_c.plot_args_fout_set
    __swig_getmethods__["fout"] = _plotstuff_c.plot_args_fout_get
    if _newclass:
        fout = _swig_property(_plotstuff_c.plot_args_fout_get, _plotstuff_c.plot_args_fout_set)
    __swig_setmethods__["outformat"] = _plotstuff_c.plot_args_outformat_set
    __swig_getmethods__["outformat"] = _plotstuff_c.plot_args_outformat_get
    if _newclass:
        outformat = _swig_property(_plotstuff_c.plot_args_outformat_get, _plotstuff_c.plot_args_outformat_set)
    __swig_setmethods__["outimage"] = _plotstuff_c.plot_args_outimage_set
    __swig_getmethods__["outimage"] = _plotstuff_c.plot_args_outimage_get
    if _newclass:
        outimage = _swig_property(_plotstuff_c.plot_args_outimage_get, _plotstuff_c.plot_args_outimage_set)
    __swig_setmethods__["cairo"] = _plotstuff_c.plot_args_cairo_set
    __swig_getmethods__["cairo"] = _plotstuff_c.plot_args_cairo_get
    if _newclass:
        cairo = _swig_property(_plotstuff_c.plot_args_cairo_get, _plotstuff_c.plot_args_cairo_set)
    __swig_setmethods__["target"] = _plotstuff_c.plot_args_target_set
    __swig_getmethods__["target"] = _plotstuff_c.plot_args_target_get
    if _newclass:
        target = _swig_property(_plotstuff_c.plot_args_target_get, _plotstuff_c.plot_args_target_set)
    __swig_setmethods__["op"] = _plotstuff_c.plot_args_op_set
    __swig_getmethods__["op"] = _plotstuff_c.plot_args_op_get
    if _newclass:
        op = _swig_property(_plotstuff_c.plot_args_op_get, _plotstuff_c.plot_args_op_set)
    __swig_setmethods__["move_to"] = _plotstuff_c.plot_args_move_to_set
    __swig_getmethods__["move_to"] = _plotstuff_c.plot_args_move_to_get
    if _newclass:
        move_to = _swig_property(_plotstuff_c.plot_args_move_to_get, _plotstuff_c.plot_args_move_to_set)
    __swig_setmethods__["move_to_baton"] = _plotstuff_c.plot_args_move_to_baton_set
    __swig_getmethods__["move_to_baton"] = _plotstuff_c.plot_args_move_to_baton_get
    if _newclass:
        move_to_baton = _swig_property(_plotstuff_c.plot_args_move_to_baton_get, _plotstuff_c.plot_args_move_to_baton_set)
    __swig_setmethods__["line_to"] = _plotstuff_c.plot_args_line_to_set
    __swig_getmethods__["line_to"] = _plotstuff_c.plot_args_line_to_get
    if _newclass:
        line_to = _swig_property(_plotstuff_c.plot_args_line_to_get, _plotstuff_c.plot_args_line_to_set)
    __swig_setmethods__["line_to_baton"] = _plotstuff_c.plot_args_line_to_baton_set
    __swig_getmethods__["line_to_baton"] = _plotstuff_c.plot_args_line_to_baton_get
    if _newclass:
        line_to_baton = _swig_property(_plotstuff_c.plot_args_line_to_baton_get, _plotstuff_c.plot_args_line_to_baton_set)
    __swig_setmethods__["wcs"] = _plotstuff_c.plot_args_wcs_set
    __swig_getmethods__["wcs"] = _plotstuff_c.plot_args_wcs_get
    if _newclass:
        wcs = _swig_property(_plotstuff_c.plot_args_wcs_get, _plotstuff_c.plot_args_wcs_set)
    __swig_setmethods__["W"] = _plotstuff_c.plot_args_W_set
    __swig_getmethods__["W"] = _plotstuff_c.plot_args_W_get
    if _newclass:
        W = _swig_property(_plotstuff_c.plot_args_W_get, _plotstuff_c.plot_args_W_set)
    __swig_setmethods__["H"] = _plotstuff_c.plot_args_H_set
    __swig_getmethods__["H"] = _plotstuff_c.plot_args_H_get
    if _newclass:
        H = _swig_property(_plotstuff_c.plot_args_H_get, _plotstuff_c.plot_args_H_set)
    __swig_setmethods__["rgba"] = _plotstuff_c.plot_args_rgba_set
    __swig_getmethods__["rgba"] = _plotstuff_c.plot_args_rgba_get
    if _newclass:
        rgba = _swig_property(_plotstuff_c.plot_args_rgba_get, _plotstuff_c.plot_args_rgba_set)
    __swig_setmethods__["lw"] = _plotstuff_c.plot_args_lw_set
    __swig_getmethods__["lw"] = _plotstuff_c.plot_args_lw_get
    if _newclass:
        lw = _swig_property(_plotstuff_c.plot_args_lw_get, _plotstuff_c.plot_args_lw_set)
    __swig_setmethods__["marker"] = _plotstuff_c.plot_args_marker_set
    __swig_getmethods__["marker"] = _plotstuff_c.plot_args_marker_get
    if _newclass:
        marker = _swig_property(_plotstuff_c.plot_args_marker_get, _plotstuff_c.plot_args_marker_set)
    __swig_setmethods__["markersize"] = _plotstuff_c.plot_args_markersize_set
    __swig_getmethods__["markersize"] = _plotstuff_c.plot_args_markersize_get
    if _newclass:
        markersize = _swig_property(_plotstuff_c.plot_args_markersize_get, _plotstuff_c.plot_args_markersize_set)
    __swig_setmethods__["bg_rgba"] = _plotstuff_c.plot_args_bg_rgba_set
    __swig_getmethods__["bg_rgba"] = _plotstuff_c.plot_args_bg_rgba_get
    if _newclass:
        bg_rgba = _swig_property(_plotstuff_c.plot_args_bg_rgba_get, _plotstuff_c.plot_args_bg_rgba_set)
    __swig_setmethods__["bg_lw"] = _plotstuff_c.plot_args_bg_lw_set
    __swig_getmethods__["bg_lw"] = _plotstuff_c.plot_args_bg_lw_get
    if _newclass:
        bg_lw = _swig_property(_plotstuff_c.plot_args_bg_lw_get, _plotstuff_c.plot_args_bg_lw_set)
    __swig_setmethods__["bg_box"] = _plotstuff_c.plot_args_bg_box_set
    __swig_getmethods__["bg_box"] = _plotstuff_c.plot_args_bg_box_get
    if _newclass:
        bg_box = _swig_property(_plotstuff_c.plot_args_bg_box_get, _plotstuff_c.plot_args_bg_box_set)
    __swig_setmethods__["fontsize"] = _plotstuff_c.plot_args_fontsize_set
    __swig_getmethods__["fontsize"] = _plotstuff_c.plot_args_fontsize_get
    if _newclass:
        fontsize = _swig_property(_plotstuff_c.plot_args_fontsize_get, _plotstuff_c.plot_args_fontsize_set)
    __swig_setmethods__["halign"] = _plotstuff_c.plot_args_halign_set
    __swig_getmethods__["halign"] = _plotstuff_c.plot_args_halign_get
    if _newclass:
        halign = _swig_property(_plotstuff_c.plot_args_halign_get, _plotstuff_c.plot_args_halign_set)
    __swig_setmethods__["valign"] = _plotstuff_c.plot_args_valign_set
    __swig_getmethods__["valign"] = _plotstuff_c.plot_args_valign_get
    if _newclass:
        valign = _swig_property(_plotstuff_c.plot_args_valign_get, _plotstuff_c.plot_args_valign_set)
    __swig_setmethods__["label_offset_x"] = _plotstuff_c.plot_args_label_offset_x_set
    __swig_getmethods__["label_offset_x"] = _plotstuff_c.plot_args_label_offset_x_get
    if _newclass:
        label_offset_x = _swig_property(_plotstuff_c.plot_args_label_offset_x_get, _plotstuff_c.plot_args_label_offset_x_set)
    __swig_setmethods__["label_offset_y"] = _plotstuff_c.plot_args_label_offset_y_set
    __swig_getmethods__["label_offset_y"] = _plotstuff_c.plot_args_label_offset_y_get
    if _newclass:
        label_offset_y = _swig_property(_plotstuff_c.plot_args_label_offset_y_get, _plotstuff_c.plot_args_label_offset_y_set)
    __swig_setmethods__["text_bg_layer"] = _plotstuff_c.plot_args_text_bg_layer_set
    __swig_getmethods__["text_bg_layer"] = _plotstuff_c.plot_args_text_bg_layer_get
    if _newclass:
        text_bg_layer = _swig_property(_plotstuff_c.plot_args_text_bg_layer_get, _plotstuff_c.plot_args_text_bg_layer_set)
    __swig_setmethods__["text_fg_layer"] = _plotstuff_c.plot_args_text_fg_layer_set
    __swig_getmethods__["text_fg_layer"] = _plotstuff_c.plot_args_text_fg_layer_get
    if _newclass:
        text_fg_layer = _swig_property(_plotstuff_c.plot_args_text_fg_layer_get, _plotstuff_c.plot_args_text_fg_layer_set)
    __swig_setmethods__["marker_fg_layer"] = _plotstuff_c.plot_args_marker_fg_layer_set
    __swig_getmethods__["marker_fg_layer"] = _plotstuff_c.plot_args_marker_fg_layer_get
    if _newclass:
        marker_fg_layer = _swig_property(_plotstuff_c.plot_args_marker_fg_layer_get, _plotstuff_c.plot_args_marker_fg_layer_set)
    __swig_setmethods__["cairocmds"] = _plotstuff_c.plot_args_cairocmds_set
    __swig_getmethods__["cairocmds"] = _plotstuff_c.plot_args_cairocmds_get
    if _newclass:
        cairocmds = _swig_property(_plotstuff_c.plot_args_cairocmds_get, _plotstuff_c.plot_args_cairocmds_set)
    __swig_setmethods__["linestep"] = _plotstuff_c.plot_args_linestep_set
    __swig_getmethods__["linestep"] = _plotstuff_c.plot_args_linestep_get
    if _newclass:
        linestep = _swig_property(_plotstuff_c.plot_args_linestep_get, _plotstuff_c.plot_args_linestep_set)

    def view_image_as_numpy(self):
        return _plotstuff_c.plot_args_view_image_as_numpy(self)

    def get_image_as_numpy(self, flip, out):
        return _plotstuff_c.plot_args_get_image_as_numpy(self, flip, out)

    def set_image_from_numpy(self, py_img, flip):
        return _plotstuff_c.plot_args_set_image_from_numpy(self, py_img, flip)

    def set_wcs_file(self, fn, ext):
        return _plotstuff_c.plot_args_set_wcs_file(self, fn, ext)

    def set_size_from_wcs(self):
        return _plotstuff_c.plot_args_set_size_from_wcs(self)

    def loginit(self, level):
        return _plotstuff_c.plot_args_loginit(self, level)

    def __init__(self):
        this = _plotstuff_c.new_plot_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plot_args
    __del__ = lambda self: None
plot_args_swigregister = _plotstuff_c.plot_args_swigregister
plot_args_swigregister(plot_args)

class plotter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _plotstuff_c.plotter_name_set
    __swig_getmethods__["name"] = _plotstuff_c.plotter_name_get
    if _newclass:
        name = _swig_property(_plotstuff_c.plotter_name_get, _plotstuff_c.plotter_name_set)
    __swig_setmethods__["init"] = _plotstuff_c.plotter_init_set
    __swig_getmethods__["init"] = _plotstuff_c.plotter_init_get
    if _newclass:
        init = _swig_property(_plotstuff_c.plotter_init_get, _plotstuff_c.plotter_init_set)
    __swig_setmethods__["init2"] = _plotstuff_c.plotter_init2_set
    __swig_getmethods__["init2"] = _plotstuff_c.plotter_init2_get
    if _newclass:
        init2 = _swig_property(_plotstuff_c.plotter_init2_get, _plotstuff_c.plotter_init2_set)
    __swig_setmethods__["command"] = _plotstuff_c.plotter_command_set
    __swig_getmethods__["command"] = _plotstuff_c.plotter_command_get
    if _newclass:
        command = _swig_property(_plotstuff_c.plotter_command_get, _plotstuff_c.plotter_command_set)
    __swig_setmethods__["doplot"] = _plotstuff_c.plotter_doplot_set
    __swig_getmethods__["doplot"] = _plotstuff_c.plotter_doplot_get
    if _newclass:
        doplot = _swig_property(_plotstuff_c.plotter_doplot_get, _plotstuff_c.plotter_doplot_set)
    __swig_setmethods__["free"] = _plotstuff_c.plotter_free_set
    __swig_getmethods__["free"] = _plotstuff_c.plotter_free_get
    if _newclass:
        free = _swig_property(_plotstuff_c.plotter_free_get, _plotstuff_c.plotter_free_set)
    __swig_setmethods__["baton"] = _plotstuff_c.plotter_baton_set
    __swig_getmethods__["baton"] = _plotstuff_c.plotter_baton_get
    if _newclass:
        baton = _swig_property(_plotstuff_c.plotter_baton_get, _plotstuff_c.plotter_baton_set)

    def __init__(self):
        this = _plotstuff_c.new_plotter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotter
    __del__ = lambda self: None
plotter_swigregister = _plotstuff_c.plotter_swigregister
plotter_swigregister(plotter)


def parse_image_format(fmt):
    return _plotstuff_c.parse_image_format(fmt)
parse_image_format = _plotstuff_c.parse_image_format

def guess_image_format_from_filename(fn):
    return _plotstuff_c.guess_image_format_from_filename(fn)
guess_image_format_from_filename = _plotstuff_c.guess_image_format_from_filename

def image_format_name_from_code(code):
    return _plotstuff_c.image_format_name_from_code(code)
image_format_name_from_code = _plotstuff_c.image_format_name_from_code

def parse_color(color, r, g, b, a):
    return _plotstuff_c.parse_color(color, r, g, b, a)
parse_color = _plotstuff_c.parse_color

def parse_color_rgba(color, rgba):
    return _plotstuff_c.parse_color_rgba(color, rgba)
parse_color_rgba = _plotstuff_c.parse_color_rgba

def cairo_set_color(cairo, color):
    return _plotstuff_c.cairo_set_color(cairo, color)
cairo_set_color = _plotstuff_c.cairo_set_color

def cairo_set_rgba(cairo, rgba):
    return _plotstuff_c.cairo_set_rgba(cairo, rgba)
cairo_set_rgba = _plotstuff_c.cairo_set_rgba

def plotstuff_new():
    return _plotstuff_c.plotstuff_new()
plotstuff_new = _plotstuff_c.plotstuff_new

def plotstuff_init(plotargs):
    return _plotstuff_c.plotstuff_init(plotargs)
plotstuff_init = _plotstuff_c.plotstuff_init

def plotstuff_read_and_run_command(pargs, f):
    return _plotstuff_c.plotstuff_read_and_run_command(pargs, f)
plotstuff_read_and_run_command = _plotstuff_c.plotstuff_read_and_run_command

def plotstuff_run_command(pargs, cmd):
    return _plotstuff_c.plotstuff_run_command(pargs, cmd)
plotstuff_run_command = _plotstuff_c.plotstuff_run_command

def plotstuff_set_text_bg_alpha(pargs, alpha):
    return _plotstuff_c.plotstuff_set_text_bg_alpha(pargs, alpha)
plotstuff_set_text_bg_alpha = _plotstuff_c.plotstuff_set_text_bg_alpha

def plotstuff_plot_layer(pargs, layer):
    return _plotstuff_c.plotstuff_plot_layer(pargs, layer)
plotstuff_plot_layer = _plotstuff_c.plotstuff_plot_layer

def plotstuff_get_config(pargs, name):
    return _plotstuff_c.plotstuff_get_config(pargs, name)
plotstuff_get_config = _plotstuff_c.plotstuff_get_config

def plotstuff_set_color(pargs, name):
    return _plotstuff_c.plotstuff_set_color(pargs, name)
plotstuff_set_color = _plotstuff_c.plotstuff_set_color

def plotstuff_set_bgcolor(pargs, name):
    return _plotstuff_c.plotstuff_set_bgcolor(pargs, name)
plotstuff_set_bgcolor = _plotstuff_c.plotstuff_set_bgcolor

def plotstuff_get_alpha(pargs):
    return _plotstuff_c.plotstuff_get_alpha(pargs)
plotstuff_get_alpha = _plotstuff_c.plotstuff_get_alpha

def plotstuff_set_alpha(pargs, alpha):
    return _plotstuff_c.plotstuff_set_alpha(pargs, alpha)
plotstuff_set_alpha = _plotstuff_c.plotstuff_set_alpha

def plotstuff_set_rgba(pargs, rgba):
    return _plotstuff_c.plotstuff_set_rgba(pargs, rgba)
plotstuff_set_rgba = _plotstuff_c.plotstuff_set_rgba

def plotstuff_set_rgba2(pargs, r, g, b, a):
    return _plotstuff_c.plotstuff_set_rgba2(pargs, r, g, b, a)
plotstuff_set_rgba2 = _plotstuff_c.plotstuff_set_rgba2

def plotstuff_set_bgrgba2(pargs, r, g, b, a):
    return _plotstuff_c.plotstuff_set_bgrgba2(pargs, r, g, b, a)
plotstuff_set_bgrgba2 = _plotstuff_c.plotstuff_set_bgrgba2

def plotstuff_set_marker(pargs, name):
    return _plotstuff_c.plotstuff_set_marker(pargs, name)
plotstuff_set_marker = _plotstuff_c.plotstuff_set_marker

def plotstuff_set_markersize(pargs, ms):
    return _plotstuff_c.plotstuff_set_markersize(pargs, ms)
plotstuff_set_markersize = _plotstuff_c.plotstuff_set_markersize

def plotstuff_set_size(pargs, W, H):
    return _plotstuff_c.plotstuff_set_size(pargs, W, H)
plotstuff_set_size = _plotstuff_c.plotstuff_set_size

def plotstuff_set_size_wcs(pargs):
    return _plotstuff_c.plotstuff_set_size_wcs(pargs)
plotstuff_set_size_wcs = _plotstuff_c.plotstuff_set_size_wcs

def plotstuff_scale_wcs(pargs, scale):
    return _plotstuff_c.plotstuff_scale_wcs(pargs, scale)
plotstuff_scale_wcs = _plotstuff_c.plotstuff_scale_wcs

def plotstuff_rotate_wcs(pargs, angle):
    return _plotstuff_c.plotstuff_rotate_wcs(pargs, angle)
plotstuff_rotate_wcs = _plotstuff_c.plotstuff_rotate_wcs

def plotstuff_set_wcs_box(pargs, ra, dec, width):
    return _plotstuff_c.plotstuff_set_wcs_box(pargs, ra, dec, width)
plotstuff_set_wcs_box = _plotstuff_c.plotstuff_set_wcs_box

def plotstuff_set_wcs_file(pargs, fn, ext):
    return _plotstuff_c.plotstuff_set_wcs_file(pargs, fn, ext)
plotstuff_set_wcs_file = _plotstuff_c.plotstuff_set_wcs_file

def plotstuff_set_wcs(pargs, wcs):
    return _plotstuff_c.plotstuff_set_wcs(pargs, wcs)
plotstuff_set_wcs = _plotstuff_c.plotstuff_set_wcs

def plotstuff_set_wcs_tan(pargs, wcs):
    return _plotstuff_c.plotstuff_set_wcs_tan(pargs, wcs)
plotstuff_set_wcs_tan = _plotstuff_c.plotstuff_set_wcs_tan

def plotstuff_set_wcs_sip(pargs, wcs):
    return _plotstuff_c.plotstuff_set_wcs_sip(pargs, wcs)
plotstuff_set_wcs_sip = _plotstuff_c.plotstuff_set_wcs_sip

def plotstuff_builtin_apply(cairo, args):
    return _plotstuff_c.plotstuff_builtin_apply(cairo, args)
plotstuff_builtin_apply = _plotstuff_c.plotstuff_builtin_apply

def plotstuff_marker_in_bounds(pargs, x, y):
    return _plotstuff_c.plotstuff_marker_in_bounds(pargs, x, y)
plotstuff_marker_in_bounds = _plotstuff_c.plotstuff_marker_in_bounds

def plotstuff_run_commandf(pargs, fmt):
    return _plotstuff_c.plotstuff_run_commandf(pargs, fmt)
plotstuff_run_commandf = _plotstuff_c.plotstuff_run_commandf

def plotstuff_output(pargs):
    return _plotstuff_c.plotstuff_output(pargs)
plotstuff_output = _plotstuff_c.plotstuff_output

def plotstuff_free(pargs):
    return _plotstuff_c.plotstuff_free(pargs)
plotstuff_free = _plotstuff_c.plotstuff_free

def plotstuff_clear(pargs):
    return _plotstuff_c.plotstuff_clear(pargs)
plotstuff_clear = _plotstuff_c.plotstuff_clear

def plotstuff_stack_marker(pargs, x, y):
    return _plotstuff_c.plotstuff_stack_marker(pargs, x, y)
plotstuff_stack_marker = _plotstuff_c.plotstuff_stack_marker

def plotstuff_stack_arrow(pargs, x, y, x2, y2):
    return _plotstuff_c.plotstuff_stack_arrow(pargs, x, y, x2, y2)
plotstuff_stack_arrow = _plotstuff_c.plotstuff_stack_arrow

def plotstuff_stack_text(pargs, cairo, txt, px, py):
    return _plotstuff_c.plotstuff_stack_text(pargs, cairo, txt, px, py)
plotstuff_stack_text = _plotstuff_c.plotstuff_stack_text

def plotstuff_plot_stack(pargs, cairo):
    return _plotstuff_c.plotstuff_plot_stack(pargs, cairo)
plotstuff_plot_stack = _plotstuff_c.plotstuff_plot_stack

def plotstuff_get_maximum_rgba(pargs):
    return _plotstuff_c.plotstuff_get_maximum_rgba(pargs)
plotstuff_get_maximum_rgba = _plotstuff_c.plotstuff_get_maximum_rgba

def plotstuff_pixel_scale(pargs):
    return _plotstuff_c.plotstuff_pixel_scale(pargs)
plotstuff_pixel_scale = _plotstuff_c.plotstuff_pixel_scale

def plotstuff_radec2xy(pargs, ra, dec):
    return _plotstuff_c.plotstuff_radec2xy(pargs, ra, dec)
plotstuff_radec2xy = _plotstuff_c.plotstuff_radec2xy

def plotstuff_xy2radec(pargs, x, y, pre):
    return _plotstuff_c.plotstuff_xy2radec(pargs, x, y, pre)
plotstuff_xy2radec = _plotstuff_c.plotstuff_xy2radec

def plotstuff_get_radec_center_and_radius(pargs):
    return _plotstuff_c.plotstuff_get_radec_center_and_radius(pargs)
plotstuff_get_radec_center_and_radius = _plotstuff_c.plotstuff_get_radec_center_and_radius

def plotstuff_get_radec_bounds(pargs, stepsize):
    return _plotstuff_c.plotstuff_get_radec_bounds(pargs, stepsize)
plotstuff_get_radec_bounds = _plotstuff_c.plotstuff_get_radec_bounds

def plotstuff_radec_is_inside_image(pargs, ra, dec):
    return _plotstuff_c.plotstuff_radec_is_inside_image(pargs, ra, dec)
plotstuff_radec_is_inside_image = _plotstuff_c.plotstuff_radec_is_inside_image

def plotstuff_line_constant_ra(pargs, ra, dec1, dec2, startwithmove):
    return _plotstuff_c.plotstuff_line_constant_ra(pargs, ra, dec1, dec2, startwithmove)
plotstuff_line_constant_ra = _plotstuff_c.plotstuff_line_constant_ra

def plotstuff_line_constant_dec(pargs, dec, ra1, ra2):
    return _plotstuff_c.plotstuff_line_constant_dec(pargs, dec, ra1, ra2)
plotstuff_line_constant_dec = _plotstuff_c.plotstuff_line_constant_dec

def plotstuff_line_constant_dec2(pargs, dec, ra1, ra2, stepra):
    return _plotstuff_c.plotstuff_line_constant_dec2(pargs, dec, ra1, ra2, stepra)
plotstuff_line_constant_dec2 = _plotstuff_c.plotstuff_line_constant_dec2

def plotstuff_text_xy(pargs, ra, dec, label):
    return _plotstuff_c.plotstuff_text_xy(pargs, ra, dec, label)
plotstuff_text_xy = _plotstuff_c.plotstuff_text_xy

def plotstuff_text_radec(pargs, ra, dec, label):
    return _plotstuff_c.plotstuff_text_radec(pargs, ra, dec, label)
plotstuff_text_radec = _plotstuff_c.plotstuff_text_radec

def plotstuff_move_to_radec(pargs, ra, dec):
    return _plotstuff_c.plotstuff_move_to_radec(pargs, ra, dec)
plotstuff_move_to_radec = _plotstuff_c.plotstuff_move_to_radec

def plotstuff_line_to_radec(pargs, ra, dec):
    return _plotstuff_c.plotstuff_line_to_radec(pargs, ra, dec)
plotstuff_line_to_radec = _plotstuff_c.plotstuff_line_to_radec

def plotstuff_close_path(pargs):
    return _plotstuff_c.plotstuff_close_path(pargs)
plotstuff_close_path = _plotstuff_c.plotstuff_close_path

def plotstuff_stroke(pargs):
    return _plotstuff_c.plotstuff_stroke(pargs)
plotstuff_stroke = _plotstuff_c.plotstuff_stroke

def plotstuff_fill(pargs):
    return _plotstuff_c.plotstuff_fill(pargs)
plotstuff_fill = _plotstuff_c.plotstuff_fill

def plotstuff_stroke_preserve(pargs):
    return _plotstuff_c.plotstuff_stroke_preserve(pargs)
plotstuff_stroke_preserve = _plotstuff_c.plotstuff_stroke_preserve

def plotstuff_fill_preserve(pargs):
    return _plotstuff_c.plotstuff_fill_preserve(pargs)
plotstuff_fill_preserve = _plotstuff_c.plotstuff_fill_preserve

def plotstuff_move_to(pargs, x, y):
    return _plotstuff_c.plotstuff_move_to(pargs, x, y)
plotstuff_move_to = _plotstuff_c.plotstuff_move_to

def plotstuff_line_to(pargs, x, y):
    return _plotstuff_c.plotstuff_line_to(pargs, x, y)
plotstuff_line_to = _plotstuff_c.plotstuff_line_to

def plotstuff_marker(pargs, x, y):
    return _plotstuff_c.plotstuff_marker(pargs, x, y)
plotstuff_marker = _plotstuff_c.plotstuff_marker

def plotstuff_marker_radec(pargs, ra, dec):
    return _plotstuff_c.plotstuff_marker_radec(pargs, ra, dec)
plotstuff_marker_radec = _plotstuff_c.plotstuff_marker_radec

def plotstuff_append_doubles(str, lst):
    return _plotstuff_c.plotstuff_append_doubles(str, lst)
plotstuff_append_doubles = _plotstuff_c.plotstuff_append_doubles

def plotstuff_set_dashed(pargs, dashlen):
    return _plotstuff_c.plotstuff_set_dashed(pargs, dashlen)
plotstuff_set_dashed = _plotstuff_c.plotstuff_set_dashed

def plotstuff_set_solid(pargs):
    return _plotstuff_c.plotstuff_set_solid(pargs)
plotstuff_set_solid = _plotstuff_c.plotstuff_set_solid
PTYPE_FLOAT = _plotstuff_c.PTYPE_FLOAT
PTYPE_INT = _plotstuff_c.PTYPE_INT
PTYPE_DOUBLE = _plotstuff_c.PTYPE_DOUBLE
PTYPE_UINT8 = _plotstuff_c.PTYPE_UINT8
PTYPE_INT16 = _plotstuff_c.PTYPE_INT16
BPP_8_UNSIGNED = _plotstuff_c.BPP_8_UNSIGNED
BPP_16_SIGNED = _plotstuff_c.BPP_16_SIGNED
BPP_32_SIGNED = _plotstuff_c.BPP_32_SIGNED
BPP_IEEE_FLOAT = _plotstuff_c.BPP_IEEE_FLOAT
BPP_IEEE_DOUBLE = _plotstuff_c.BPP_IEEE_DOUBLE
BPP_DEFAULT = _plotstuff_c.BPP_DEFAULT
class qfitsdumper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qfitsdumper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qfitsdumper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _plotstuff_c.qfitsdumper_filename_set
    __swig_getmethods__["filename"] = _plotstuff_c.qfitsdumper_filename_get
    if _newclass:
        filename = _swig_property(_plotstuff_c.qfitsdumper_filename_get, _plotstuff_c.qfitsdumper_filename_set)
    __swig_setmethods__["npix"] = _plotstuff_c.qfitsdumper_npix_set
    __swig_getmethods__["npix"] = _plotstuff_c.qfitsdumper_npix_get
    if _newclass:
        npix = _swig_property(_plotstuff_c.qfitsdumper_npix_get, _plotstuff_c.qfitsdumper_npix_set)
    __swig_setmethods__["ptype"] = _plotstuff_c.qfitsdumper_ptype_set
    __swig_getmethods__["ptype"] = _plotstuff_c.qfitsdumper_ptype_get
    if _newclass:
        ptype = _swig_property(_plotstuff_c.qfitsdumper_ptype_get, _plotstuff_c.qfitsdumper_ptype_set)
    __swig_setmethods__["ibuf"] = _plotstuff_c.qfitsdumper_ibuf_set
    __swig_getmethods__["ibuf"] = _plotstuff_c.qfitsdumper_ibuf_get
    if _newclass:
        ibuf = _swig_property(_plotstuff_c.qfitsdumper_ibuf_get, _plotstuff_c.qfitsdumper_ibuf_set)
    __swig_setmethods__["fbuf"] = _plotstuff_c.qfitsdumper_fbuf_set
    __swig_getmethods__["fbuf"] = _plotstuff_c.qfitsdumper_fbuf_get
    if _newclass:
        fbuf = _swig_property(_plotstuff_c.qfitsdumper_fbuf_get, _plotstuff_c.qfitsdumper_fbuf_set)
    __swig_setmethods__["dbuf"] = _plotstuff_c.qfitsdumper_dbuf_set
    __swig_getmethods__["dbuf"] = _plotstuff_c.qfitsdumper_dbuf_get
    if _newclass:
        dbuf = _swig_property(_plotstuff_c.qfitsdumper_dbuf_get, _plotstuff_c.qfitsdumper_dbuf_set)
    __swig_setmethods__["vbuf"] = _plotstuff_c.qfitsdumper_vbuf_set
    __swig_getmethods__["vbuf"] = _plotstuff_c.qfitsdumper_vbuf_get
    if _newclass:
        vbuf = _swig_property(_plotstuff_c.qfitsdumper_vbuf_get, _plotstuff_c.qfitsdumper_vbuf_set)
    __swig_setmethods__["out_ptype"] = _plotstuff_c.qfitsdumper_out_ptype_set
    __swig_getmethods__["out_ptype"] = _plotstuff_c.qfitsdumper_out_ptype_get
    if _newclass:
        out_ptype = _swig_property(_plotstuff_c.qfitsdumper_out_ptype_get, _plotstuff_c.qfitsdumper_out_ptype_set)

    def __init__(self):
        this = _plotstuff_c.new_qfitsdumper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_qfitsdumper
    __del__ = lambda self: None
qfitsdumper_swigregister = _plotstuff_c.qfitsdumper_swigregister
qfitsdumper_swigregister(qfitsdumper)


def qfits_pixdump(arg1):
    return _plotstuff_c.qfits_pixdump(arg1)
qfits_pixdump = _plotstuff_c.qfits_pixdump

def convolve_get_gaussian_kernel_f(sigma, nsigma, k0, NK):
    return _plotstuff_c.convolve_get_gaussian_kernel_f(sigma, nsigma, k0, NK)
convolve_get_gaussian_kernel_f = _plotstuff_c.convolve_get_gaussian_kernel_f

def convolve_separable_f(img, W, H, kernel, k0, NK, outimg, tempimg):
    return _plotstuff_c.convolve_separable_f(img, W, H, kernel, k0, NK, outimg, tempimg)
convolve_separable_f = _plotstuff_c.convolve_separable_f

def convolve_separable_weighted_f(img, W, H, weight, kernel, k0, NK, outimg, tempimg):
    return _plotstuff_c.convolve_separable_weighted_f(img, W, H, weight, kernel, k0, NK, outimg, tempimg)
convolve_separable_weighted_f = _plotstuff_c.convolve_separable_weighted_f

def c_image_numpy_view(data, nx, ny):
    return _plotstuff_c.c_image_numpy_view(data, nx, ny)
c_image_numpy_view = _plotstuff_c.c_image_numpy_view

def qfits_load_image(fn, ext=1, plane=0, map=1, ptype=PTYPE_FLOAT):
    ld = qfitsloader()
    ld.filename = fn
    ld.xtnum = ext
    ld.pnum = plane
    ld.map = map
    ld.ptype = ptype
    if qfitsloader_init(ld):
        raise RuntimeError('qfitsloader_init(file "%s", ext %i) failed' % (fn, ext))
    if qfits_loadpix(ld):
        raise RuntimeError('qfits_loadpix(file "%s", ext %i) failed' % (fn, ext))

    class qfits_image(object):
        def __init__(self, pix, nx, ny, ld):
            self.pix = pix
            self.nx = nx
            self.ny = ny
            self.ld = ld
        def __del__(self):
            qfitsloader_free_buffer(self.ld)

    return qfits_image(ld.fbuf, ld.lx, ld.ly, ld)


def free(ptr):
    return _plotstuff_c.free(ptr)
free = _plotstuff_c.free

def point_in_polygon(x, y, polygon):
    return _plotstuff_c.point_in_polygon(x, y, polygon)
point_in_polygon = _plotstuff_c.point_in_polygon

def tan_vectors(pt, vec1, vec2):
    return _plotstuff_c.tan_vectors(pt, vec1, vec2)
tan_vectors = _plotstuff_c.tan_vectors

def invert_2by2(A, Ainv):
    return _plotstuff_c.invert_2by2(A, Ainv)
invert_2by2 = _plotstuff_c.invert_2by2

def invert_2by2_arr(A, Ainv):
    return _plotstuff_c.invert_2by2_arr(A, Ainv)
invert_2by2_arr = _plotstuff_c.invert_2by2_arr

def is_power_of_two(x):
    return _plotstuff_c.is_power_of_two(x)
is_power_of_two = _plotstuff_c.is_power_of_two

def matrix_matrix_3(m1, m2, result):
    return _plotstuff_c.matrix_matrix_3(m1, m2, result)
matrix_matrix_3 = _plotstuff_c.matrix_matrix_3

def matrix_vector_3(m, v, result):
    return _plotstuff_c.matrix_vector_3(m, v, result)
matrix_vector_3 = _plotstuff_c.matrix_vector_3

def dot_product_3(v1, v2):
    return _plotstuff_c.dot_product_3(v1, v2)
dot_product_3 = _plotstuff_c.dot_product_3

def vector_length_3(v):
    return _plotstuff_c.vector_length_3(v)
vector_length_3 = _plotstuff_c.vector_length_3

def vector_length_squared_3(v):
    return _plotstuff_c.vector_length_squared_3(v)
vector_length_squared_3 = _plotstuff_c.vector_length_squared_3

def inverse_3by3(matrix):
    return _plotstuff_c.inverse_3by3(matrix)
inverse_3by3 = _plotstuff_c.inverse_3by3

def image_to_xyz(uu, vv, s, transform):
    return _plotstuff_c.image_to_xyz(uu, vv, s, transform)
image_to_xyz = _plotstuff_c.image_to_xyz

def fit_transform(star, field, N, trans):
    return _plotstuff_c.fit_transform(star, field, N, trans)
fit_transform = _plotstuff_c.fit_transform

def uniform_sample(low, high):
    return _plotstuff_c.uniform_sample(low, high)
uniform_sample = _plotstuff_c.uniform_sample

def gaussian_sample(mean, stddev):
    return _plotstuff_c.gaussian_sample(mean, stddev)
gaussian_sample = _plotstuff_c.gaussian_sample
EDGE_TRUNCATE = _plotstuff_c.EDGE_TRUNCATE
EDGE_AVERAGE = _plotstuff_c.EDGE_AVERAGE

def get_output_image_size(W, H, blocksize, edgehandling, outw, outh):
    return _plotstuff_c.get_output_image_size(W, H, blocksize, edgehandling, outw, outh)
get_output_image_size = _plotstuff_c.get_output_image_size

def average_image_f(image, W, H, blocksize, edgehandling, output):
    return _plotstuff_c.average_image_f(image, W, H, blocksize, edgehandling, output)
average_image_f = _plotstuff_c.average_image_f

def average_weighted_image_f(image, weight, W, H, blocksize, edgehandling, output, nilval):
    return _plotstuff_c.average_weighted_image_f(image, weight, W, H, blocksize, edgehandling, output, nilval)
average_weighted_image_f = _plotstuff_c.average_weighted_image_f

def imax(a, b):
    return _plotstuff_c.imax(a, b)
imax = _plotstuff_c.imax

def imin(a, b):
    return _plotstuff_c.imin(a, b)
imin = _plotstuff_c.imin

def distsq_exceeds(d1, d2, D, limit):
    return _plotstuff_c.distsq_exceeds(d1, d2, D, limit)
distsq_exceeds = _plotstuff_c.distsq_exceeds

def square(d):
    return _plotstuff_c.square(d)
square = _plotstuff_c.square

def inrange(ra, ralow, rahigh):
    return _plotstuff_c.inrange(ra, ralow, rahigh)
inrange = _plotstuff_c.inrange

def distsq(d1, d2, D):
    return _plotstuff_c.distsq(d1, d2, D)
distsq = _plotstuff_c.distsq

def cross_product(v1, v2, cross):
    return _plotstuff_c.cross_product(v1, v2, cross)
cross_product = _plotstuff_c.cross_product

def normalize(x, y, z):
    return _plotstuff_c.normalize(x, y, z)
normalize = _plotstuff_c.normalize

def normalize_3(xyz):
    return _plotstuff_c.normalize_3(xyz)
normalize_3 = _plotstuff_c.normalize_3
class plotimage_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotimage_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotimage_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fn"] = _plotstuff_c.plotimage_args_fn_set
    __swig_getmethods__["fn"] = _plotstuff_c.plotimage_args_fn_get
    if _newclass:
        fn = _swig_property(_plotstuff_c.plotimage_args_fn_get, _plotstuff_c.plotimage_args_fn_set)
    __swig_setmethods__["format"] = _plotstuff_c.plotimage_args_format_set
    __swig_getmethods__["format"] = _plotstuff_c.plotimage_args_format_get
    if _newclass:
        format = _swig_property(_plotstuff_c.plotimage_args_format_get, _plotstuff_c.plotimage_args_format_set)
    __swig_setmethods__["resample"] = _plotstuff_c.plotimage_args_resample_set
    __swig_getmethods__["resample"] = _plotstuff_c.plotimage_args_resample_get
    if _newclass:
        resample = _swig_property(_plotstuff_c.plotimage_args_resample_get, _plotstuff_c.plotimage_args_resample_set)
    __swig_setmethods__["downsample"] = _plotstuff_c.plotimage_args_downsample_set
    __swig_getmethods__["downsample"] = _plotstuff_c.plotimage_args_downsample_get
    if _newclass:
        downsample = _swig_property(_plotstuff_c.plotimage_args_downsample_get, _plotstuff_c.plotimage_args_downsample_set)
    __swig_setmethods__["arcsinh"] = _plotstuff_c.plotimage_args_arcsinh_set
    __swig_getmethods__["arcsinh"] = _plotstuff_c.plotimage_args_arcsinh_get
    if _newclass:
        arcsinh = _swig_property(_plotstuff_c.plotimage_args_arcsinh_get, _plotstuff_c.plotimage_args_arcsinh_set)
    __swig_setmethods__["rgbscale"] = _plotstuff_c.plotimage_args_rgbscale_set
    __swig_getmethods__["rgbscale"] = _plotstuff_c.plotimage_args_rgbscale_get
    if _newclass:
        rgbscale = _swig_property(_plotstuff_c.plotimage_args_rgbscale_get, _plotstuff_c.plotimage_args_rgbscale_set)
    __swig_setmethods__["alpha"] = _plotstuff_c.plotimage_args_alpha_set
    __swig_getmethods__["alpha"] = _plotstuff_c.plotimage_args_alpha_get
    if _newclass:
        alpha = _swig_property(_plotstuff_c.plotimage_args_alpha_get, _plotstuff_c.plotimage_args_alpha_set)
    __swig_setmethods__["wcs"] = _plotstuff_c.plotimage_args_wcs_set
    __swig_getmethods__["wcs"] = _plotstuff_c.plotimage_args_wcs_get
    if _newclass:
        wcs = _swig_property(_plotstuff_c.plotimage_args_wcs_get, _plotstuff_c.plotimage_args_wcs_set)
    __swig_setmethods__["gridsize"] = _plotstuff_c.plotimage_args_gridsize_set
    __swig_getmethods__["gridsize"] = _plotstuff_c.plotimage_args_gridsize_get
    if _newclass:
        gridsize = _swig_property(_plotstuff_c.plotimage_args_gridsize_get, _plotstuff_c.plotimage_args_gridsize_set)
    __swig_setmethods__["image_low"] = _plotstuff_c.plotimage_args_image_low_set
    __swig_getmethods__["image_low"] = _plotstuff_c.plotimage_args_image_low_get
    if _newclass:
        image_low = _swig_property(_plotstuff_c.plotimage_args_image_low_get, _plotstuff_c.plotimage_args_image_low_set)
    __swig_setmethods__["image_high"] = _plotstuff_c.plotimage_args_image_high_set
    __swig_getmethods__["image_high"] = _plotstuff_c.plotimage_args_image_high_get
    if _newclass:
        image_high = _swig_property(_plotstuff_c.plotimage_args_image_high_get, _plotstuff_c.plotimage_args_image_high_set)
    __swig_setmethods__["image_null"] = _plotstuff_c.plotimage_args_image_null_set
    __swig_getmethods__["image_null"] = _plotstuff_c.plotimage_args_image_null_get
    if _newclass:
        image_null = _swig_property(_plotstuff_c.plotimage_args_image_null_get, _plotstuff_c.plotimage_args_image_null_set)
    __swig_setmethods__["image_valid_low"] = _plotstuff_c.plotimage_args_image_valid_low_set
    __swig_getmethods__["image_valid_low"] = _plotstuff_c.plotimage_args_image_valid_low_get
    if _newclass:
        image_valid_low = _swig_property(_plotstuff_c.plotimage_args_image_valid_low_get, _plotstuff_c.plotimage_args_image_valid_low_set)
    __swig_setmethods__["image_valid_high"] = _plotstuff_c.plotimage_args_image_valid_high_set
    __swig_getmethods__["image_valid_high"] = _plotstuff_c.plotimage_args_image_valid_high_get
    if _newclass:
        image_valid_high = _swig_property(_plotstuff_c.plotimage_args_image_valid_high_get, _plotstuff_c.plotimage_args_image_valid_high_set)
    __swig_setmethods__["n_invalid_low"] = _plotstuff_c.plotimage_args_n_invalid_low_set
    __swig_getmethods__["n_invalid_low"] = _plotstuff_c.plotimage_args_n_invalid_low_get
    if _newclass:
        n_invalid_low = _swig_property(_plotstuff_c.plotimage_args_n_invalid_low_get, _plotstuff_c.plotimage_args_n_invalid_low_set)
    __swig_setmethods__["n_invalid_high"] = _plotstuff_c.plotimage_args_n_invalid_high_set
    __swig_getmethods__["n_invalid_high"] = _plotstuff_c.plotimage_args_n_invalid_high_get
    if _newclass:
        n_invalid_high = _swig_property(_plotstuff_c.plotimage_args_n_invalid_high_get, _plotstuff_c.plotimage_args_n_invalid_high_set)
    __swig_setmethods__["n_invalid_null"] = _plotstuff_c.plotimage_args_n_invalid_null_set
    __swig_getmethods__["n_invalid_null"] = _plotstuff_c.plotimage_args_n_invalid_null_get
    if _newclass:
        n_invalid_null = _swig_property(_plotstuff_c.plotimage_args_n_invalid_null_get, _plotstuff_c.plotimage_args_n_invalid_null_set)
    __swig_setmethods__["fitsext"] = _plotstuff_c.plotimage_args_fitsext_set
    __swig_getmethods__["fitsext"] = _plotstuff_c.plotimage_args_fitsext_get
    if _newclass:
        fitsext = _swig_property(_plotstuff_c.plotimage_args_fitsext_get, _plotstuff_c.plotimage_args_fitsext_set)
    __swig_setmethods__["fitsplane"] = _plotstuff_c.plotimage_args_fitsplane_set
    __swig_getmethods__["fitsplane"] = _plotstuff_c.plotimage_args_fitsplane_get
    if _newclass:
        fitsplane = _swig_property(_plotstuff_c.plotimage_args_fitsplane_get, _plotstuff_c.plotimage_args_fitsplane_set)
    __swig_setmethods__["auto_scale"] = _plotstuff_c.plotimage_args_auto_scale_set
    __swig_getmethods__["auto_scale"] = _plotstuff_c.plotimage_args_auto_scale_get
    if _newclass:
        auto_scale = _swig_property(_plotstuff_c.plotimage_args_auto_scale_get, _plotstuff_c.plotimage_args_auto_scale_set)
    __swig_setmethods__["img"] = _plotstuff_c.plotimage_args_img_set
    __swig_getmethods__["img"] = _plotstuff_c.plotimage_args_img_get
    if _newclass:
        img = _swig_property(_plotstuff_c.plotimage_args_img_get, _plotstuff_c.plotimage_args_img_set)
    __swig_setmethods__["W"] = _plotstuff_c.plotimage_args_W_set
    __swig_getmethods__["W"] = _plotstuff_c.plotimage_args_W_get
    if _newclass:
        W = _swig_property(_plotstuff_c.plotimage_args_W_get, _plotstuff_c.plotimage_args_W_set)
    __swig_setmethods__["H"] = _plotstuff_c.plotimage_args_H_set
    __swig_getmethods__["H"] = _plotstuff_c.plotimage_args_H_get
    if _newclass:
        H = _swig_property(_plotstuff_c.plotimage_args_H_get, _plotstuff_c.plotimage_args_H_set)

    def _set_image_from_numpy(self, arr):
        return _plotstuff_c.plotimage_args__set_image_from_numpy(self, arr)

    def set_wcs_file(self, fn, ext):
        return _plotstuff_c.plotimage_args_set_wcs_file(self, fn, ext)

    def set_file(self, fn):
        return _plotstuff_c.plotimage_args_set_file(self, fn)

    def set_rgbscale(self, r, g, b):
        return _plotstuff_c.plotimage_args_set_rgbscale(self, r, g, b)

    def get_image_width(self):
        return _plotstuff_c.plotimage_args_get_image_width(self)

    def get_image_height(self):
        return _plotstuff_c.plotimage_args_get_image_height(self)

    def __init__(self):
        this = _plotstuff_c.new_plotimage_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotimage_args
    __del__ = lambda self: None
plotimage_args_swigregister = _plotstuff_c.plotimage_args_swigregister
plotimage_args_swigregister(plotimage_args)


def plot_image_get(pargs):
    return _plotstuff_c.plot_image_get(pargs)
plot_image_get = _plotstuff_c.plot_image_get

def plot_image_set_wcs(args, filename, ext):
    return _plotstuff_c.plot_image_set_wcs(args, filename, ext)
plot_image_set_wcs = _plotstuff_c.plot_image_set_wcs

def plot_image_init(args):
    return _plotstuff_c.plot_image_init(args)
plot_image_init = _plotstuff_c.plot_image_init

def plot_image_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_image_command(command, cmdargs, args, baton)
plot_image_command = _plotstuff_c.plot_image_command

def plot_image_plot(command, cr, args, baton):
    return _plotstuff_c.plot_image_plot(command, cr, args, baton)
plot_image_plot = _plotstuff_c.plot_image_plot

def plot_image_free(args, baton):
    return _plotstuff_c.plot_image_free(args, baton)
plot_image_free = _plotstuff_c.plot_image_free

def plot_image_getsize(args, W, H):
    return _plotstuff_c.plot_image_getsize(args, W, H)
plot_image_getsize = _plotstuff_c.plot_image_getsize

def plot_image_set_filename(args, fn):
    return _plotstuff_c.plot_image_set_filename(args, fn)
plot_image_set_filename = _plotstuff_c.plot_image_set_filename

def plot_image_setsize(pargs, args):
    return _plotstuff_c.plot_image_setsize(pargs, args)
plot_image_setsize = _plotstuff_c.plot_image_setsize

def plot_image_get_percentile(pargs, args, percentile):
    return _plotstuff_c.plot_image_get_percentile(pargs, args, percentile)
plot_image_get_percentile = _plotstuff_c.plot_image_get_percentile

def plot_image_add_to_pixels(args, rgb):
    return _plotstuff_c.plot_image_add_to_pixels(args, rgb)
plot_image_add_to_pixels = _plotstuff_c.plot_image_add_to_pixels

def plot_image_scale_float(args, fimg):
    return _plotstuff_c.plot_image_scale_float(args, fimg)
plot_image_scale_float = _plotstuff_c.plot_image_scale_float

def plot_image_rgba_data(cairo, args):
    return _plotstuff_c.plot_image_rgba_data(cairo, args)
plot_image_rgba_data = _plotstuff_c.plot_image_rgba_data

def plot_image_read(pargs, args):
    return _plotstuff_c.plot_image_read(pargs, args)
plot_image_read = _plotstuff_c.plot_image_read

def plot_image_make_color_transparent(args, r, g, b):
    return _plotstuff_c.plot_image_make_color_transparent(args, r, g, b)
plot_image_make_color_transparent = _plotstuff_c.plot_image_make_color_transparent

def plot_image_describe(p):
    return _plotstuff_c.plot_image_describe(p)
plot_image_describe = _plotstuff_c.plot_image_describe
class plotoutline_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotoutline_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotoutline_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wcs"] = _plotstuff_c.plotoutline_args_wcs_set
    __swig_getmethods__["wcs"] = _plotstuff_c.plotoutline_args_wcs_get
    if _newclass:
        wcs = _swig_property(_plotstuff_c.plotoutline_args_wcs_get, _plotstuff_c.plotoutline_args_wcs_set)
    __swig_setmethods__["stepsize"] = _plotstuff_c.plotoutline_args_stepsize_set
    __swig_getmethods__["stepsize"] = _plotstuff_c.plotoutline_args_stepsize_get
    if _newclass:
        stepsize = _swig_property(_plotstuff_c.plotoutline_args_stepsize_get, _plotstuff_c.plotoutline_args_stepsize_set)
    __swig_setmethods__["fill"] = _plotstuff_c.plotoutline_args_fill_set
    __swig_getmethods__["fill"] = _plotstuff_c.plotoutline_args_fill_get
    if _newclass:
        fill = _swig_property(_plotstuff_c.plotoutline_args_fill_get, _plotstuff_c.plotoutline_args_fill_set)

    def set_wcs_file(self, fn, ext):
        return _plotstuff_c.plotoutline_args_set_wcs_file(self, fn, ext)

    def set_wcs_size(self, W, H):
        return _plotstuff_c.plotoutline_args_set_wcs_size(self, W, H)

    def __init__(self):
        this = _plotstuff_c.new_plotoutline_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotoutline_args
    __del__ = lambda self: None
plotoutline_args_swigregister = _plotstuff_c.plotoutline_args_swigregister
plotoutline_args_swigregister(plotoutline_args)


def plot_outline_get(pargs):
    return _plotstuff_c.plot_outline_get(pargs)
plot_outline_get = _plotstuff_c.plot_outline_get

def plot_outline_init(args):
    return _plotstuff_c.plot_outline_init(args)
plot_outline_init = _plotstuff_c.plot_outline_init

def plot_outline_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_outline_command(command, cmdargs, args, baton)
plot_outline_command = _plotstuff_c.plot_outline_command

def plot_outline_plot(command, cr, args, baton):
    return _plotstuff_c.plot_outline_plot(command, cr, args, baton)
plot_outline_plot = _plotstuff_c.plot_outline_plot

def plot_outline_free(args, baton):
    return _plotstuff_c.plot_outline_free(args, baton)
plot_outline_free = _plotstuff_c.plot_outline_free

def plot_outline_set_wcs_file(args, filename, ext):
    return _plotstuff_c.plot_outline_set_wcs_file(args, filename, ext)
plot_outline_set_wcs_file = _plotstuff_c.plot_outline_set_wcs_file

def plot_outline_set_wcs_size(args, W, H):
    return _plotstuff_c.plot_outline_set_wcs_size(args, W, H)
plot_outline_set_wcs_size = _plotstuff_c.plot_outline_set_wcs_size

def plot_outline_set_wcs(args, wcs):
    return _plotstuff_c.plot_outline_set_wcs(args, wcs)
plot_outline_set_wcs = _plotstuff_c.plot_outline_set_wcs

def plot_outline_set_fill(args, fill):
    return _plotstuff_c.plot_outline_set_fill(args, fill)
plot_outline_set_fill = _plotstuff_c.plot_outline_set_fill

def plot_outline_describe(p):
    return _plotstuff_c.plot_outline_describe(p)
plot_outline_describe = _plotstuff_c.plot_outline_describe
class plotgrid_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotgrid_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotgrid_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dolabel"] = _plotstuff_c.plotgrid_args_dolabel_set
    __swig_getmethods__["dolabel"] = _plotstuff_c.plotgrid_args_dolabel_get
    if _newclass:
        dolabel = _swig_property(_plotstuff_c.plotgrid_args_dolabel_get, _plotstuff_c.plotgrid_args_dolabel_set)
    __swig_setmethods__["rastep"] = _plotstuff_c.plotgrid_args_rastep_set
    __swig_getmethods__["rastep"] = _plotstuff_c.plotgrid_args_rastep_get
    if _newclass:
        rastep = _swig_property(_plotstuff_c.plotgrid_args_rastep_get, _plotstuff_c.plotgrid_args_rastep_set)
    __swig_setmethods__["decstep"] = _plotstuff_c.plotgrid_args_decstep_set
    __swig_getmethods__["decstep"] = _plotstuff_c.plotgrid_args_decstep_get
    if _newclass:
        decstep = _swig_property(_plotstuff_c.plotgrid_args_decstep_get, _plotstuff_c.plotgrid_args_decstep_set)
    __swig_setmethods__["ralabelstep"] = _plotstuff_c.plotgrid_args_ralabelstep_set
    __swig_getmethods__["ralabelstep"] = _plotstuff_c.plotgrid_args_ralabelstep_get
    if _newclass:
        ralabelstep = _swig_property(_plotstuff_c.plotgrid_args_ralabelstep_get, _plotstuff_c.plotgrid_args_ralabelstep_set)
    __swig_setmethods__["declabelstep"] = _plotstuff_c.plotgrid_args_declabelstep_set
    __swig_getmethods__["declabelstep"] = _plotstuff_c.plotgrid_args_declabelstep_get
    if _newclass:
        declabelstep = _swig_property(_plotstuff_c.plotgrid_args_declabelstep_get, _plotstuff_c.plotgrid_args_declabelstep_set)
    __swig_setmethods__["ralabeldir"] = _plotstuff_c.plotgrid_args_ralabeldir_set
    __swig_getmethods__["ralabeldir"] = _plotstuff_c.plotgrid_args_ralabeldir_get
    if _newclass:
        ralabeldir = _swig_property(_plotstuff_c.plotgrid_args_ralabeldir_get, _plotstuff_c.plotgrid_args_ralabeldir_set)
    __swig_setmethods__["declabeldir"] = _plotstuff_c.plotgrid_args_declabeldir_set
    __swig_getmethods__["declabeldir"] = _plotstuff_c.plotgrid_args_declabeldir_get
    if _newclass:
        declabeldir = _swig_property(_plotstuff_c.plotgrid_args_declabeldir_get, _plotstuff_c.plotgrid_args_declabeldir_set)
    __swig_setmethods__["ralo"] = _plotstuff_c.plotgrid_args_ralo_set
    __swig_getmethods__["ralo"] = _plotstuff_c.plotgrid_args_ralo_get
    if _newclass:
        ralo = _swig_property(_plotstuff_c.plotgrid_args_ralo_get, _plotstuff_c.plotgrid_args_ralo_set)
    __swig_setmethods__["rahi"] = _plotstuff_c.plotgrid_args_rahi_set
    __swig_getmethods__["rahi"] = _plotstuff_c.plotgrid_args_rahi_get
    if _newclass:
        rahi = _swig_property(_plotstuff_c.plotgrid_args_rahi_get, _plotstuff_c.plotgrid_args_rahi_set)
    __swig_setmethods__["declo"] = _plotstuff_c.plotgrid_args_declo_set
    __swig_getmethods__["declo"] = _plotstuff_c.plotgrid_args_declo_get
    if _newclass:
        declo = _swig_property(_plotstuff_c.plotgrid_args_declo_get, _plotstuff_c.plotgrid_args_declo_set)
    __swig_setmethods__["dechi"] = _plotstuff_c.plotgrid_args_dechi_set
    __swig_getmethods__["dechi"] = _plotstuff_c.plotgrid_args_dechi_get
    if _newclass:
        dechi = _swig_property(_plotstuff_c.plotgrid_args_dechi_get, _plotstuff_c.plotgrid_args_dechi_set)
    __swig_setmethods__["raformat"] = _plotstuff_c.plotgrid_args_raformat_set
    __swig_getmethods__["raformat"] = _plotstuff_c.plotgrid_args_raformat_get
    if _newclass:
        raformat = _swig_property(_plotstuff_c.plotgrid_args_raformat_get, _plotstuff_c.plotgrid_args_raformat_set)
    __swig_setmethods__["decformat"] = _plotstuff_c.plotgrid_args_decformat_set
    __swig_getmethods__["decformat"] = _plotstuff_c.plotgrid_args_decformat_get
    if _newclass:
        decformat = _swig_property(_plotstuff_c.plotgrid_args_decformat_get, _plotstuff_c.plotgrid_args_decformat_set)

    def set_formats(self, raformat, decformat):
        return _plotstuff_c.plotgrid_args_set_formats(self, raformat, decformat)

    def __init__(self):
        this = _plotstuff_c.new_plotgrid_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotgrid_args
    __del__ = lambda self: None
plotgrid_args_swigregister = _plotstuff_c.plotgrid_args_swigregister
plotgrid_args_swigregister(plotgrid_args)


def plot_grid_get(pargs):
    return _plotstuff_c.plot_grid_get(pargs)
plot_grid_get = _plotstuff_c.plot_grid_get

def plot_grid_init(args):
    return _plotstuff_c.plot_grid_init(args)
plot_grid_init = _plotstuff_c.plot_grid_init

def plot_grid_set_formats(grid, raformat, decformat):
    return _plotstuff_c.plot_grid_set_formats(grid, raformat, decformat)
plot_grid_set_formats = _plotstuff_c.plot_grid_set_formats

def plot_grid_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_grid_command(command, cmdargs, args, baton)
plot_grid_command = _plotstuff_c.plot_grid_command

def plot_grid_plot(command, cr, args, baton):
    return _plotstuff_c.plot_grid_plot(command, cr, args, baton)
plot_grid_plot = _plotstuff_c.plot_grid_plot

def plot_grid_free(args, baton):
    return _plotstuff_c.plot_grid_free(args, baton)
plot_grid_free = _plotstuff_c.plot_grid_free
DIRECTION_DEFAULT = _plotstuff_c.DIRECTION_DEFAULT
DIRECTION_POS = _plotstuff_c.DIRECTION_POS
DIRECTION_NEG = _plotstuff_c.DIRECTION_NEG
DIRECTION_POSNEG = _plotstuff_c.DIRECTION_POSNEG
DIRECTION_NEGPOS = _plotstuff_c.DIRECTION_NEGPOS

def plot_grid_add_label(pargs, ra, dec, lval, format):
    return _plotstuff_c.plot_grid_add_label(pargs, ra, dec, lval, format)
plot_grid_add_label = _plotstuff_c.plot_grid_add_label

def plot_grid_find_ra_label_location(pargs, ra, cdec, decmin, decmax, dirn):
    return _plotstuff_c.plot_grid_find_ra_label_location(pargs, ra, cdec, decmin, decmax, dirn)
plot_grid_find_ra_label_location = _plotstuff_c.plot_grid_find_ra_label_location

def plot_grid_find_dec_label_location(pargs, dec, cra, ramin, ramax, dirn):
    return _plotstuff_c.plot_grid_find_dec_label_location(pargs, dec, cra, ramin, ramax, dirn)
plot_grid_find_dec_label_location = _plotstuff_c.plot_grid_find_dec_label_location

def plot_grid_describe(p):
    return _plotstuff_c.plot_grid_describe(p)
plot_grid_describe = _plotstuff_c.plot_grid_describe
class plotindex_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotindex_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotindex_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["indexes"] = _plotstuff_c.plotindex_args_indexes_set
    __swig_getmethods__["indexes"] = _plotstuff_c.plotindex_args_indexes_get
    if _newclass:
        indexes = _swig_property(_plotstuff_c.plotindex_args_indexes_get, _plotstuff_c.plotindex_args_indexes_set)
    __swig_setmethods__["qidxes"] = _plotstuff_c.plotindex_args_qidxes_set
    __swig_getmethods__["qidxes"] = _plotstuff_c.plotindex_args_qidxes_get
    if _newclass:
        qidxes = _swig_property(_plotstuff_c.plotindex_args_qidxes_get, _plotstuff_c.plotindex_args_qidxes_set)
    __swig_setmethods__["stars"] = _plotstuff_c.plotindex_args_stars_set
    __swig_getmethods__["stars"] = _plotstuff_c.plotindex_args_stars_get
    if _newclass:
        stars = _swig_property(_plotstuff_c.plotindex_args_stars_get, _plotstuff_c.plotindex_args_stars_set)
    __swig_setmethods__["quads"] = _plotstuff_c.plotindex_args_quads_set
    __swig_getmethods__["quads"] = _plotstuff_c.plotindex_args_quads_get
    if _newclass:
        quads = _swig_property(_plotstuff_c.plotindex_args_quads_get, _plotstuff_c.plotindex_args_quads_set)
    __swig_setmethods__["fill"] = _plotstuff_c.plotindex_args_fill_set
    __swig_getmethods__["fill"] = _plotstuff_c.plotindex_args_fill_get
    if _newclass:
        fill = _swig_property(_plotstuff_c.plotindex_args_fill_get, _plotstuff_c.plotindex_args_fill_set)

    def add_file(self, fn):
        return _plotstuff_c.plotindex_args_add_file(self, fn)

    def __init__(self):
        this = _plotstuff_c.new_plotindex_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotindex_args
    __del__ = lambda self: None
plotindex_args_swigregister = _plotstuff_c.plotindex_args_swigregister
plotindex_args_swigregister(plotindex_args)


def plot_quad_xy(cairo, quadxy, dimquads):
    return _plotstuff_c.plot_quad_xy(cairo, quadxy, dimquads)
plot_quad_xy = _plotstuff_c.plot_quad_xy

def plot_index_plotquad(cairo, pargs, args, index, quadnum, DQ):
    return _plotstuff_c.plot_index_plotquad(cairo, pargs, args, index, quadnum, DQ)
plot_index_plotquad = _plotstuff_c.plot_index_plotquad

def plot_index_get(pargs):
    return _plotstuff_c.plot_index_get(pargs)
plot_index_get = _plotstuff_c.plot_index_get

def plot_index_add_file(args, fn):
    return _plotstuff_c.plot_index_add_file(args, fn)
plot_index_add_file = _plotstuff_c.plot_index_add_file

def plot_index_add_qidx_file(args, fn):
    return _plotstuff_c.plot_index_add_qidx_file(args, fn)
plot_index_add_qidx_file = _plotstuff_c.plot_index_add_qidx_file

def plot_index_init(args):
    return _plotstuff_c.plot_index_init(args)
plot_index_init = _plotstuff_c.plot_index_init

def plot_index_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_index_command(command, cmdargs, args, baton)
plot_index_command = _plotstuff_c.plot_index_command

def plot_index_plot(command, cr, args, baton):
    return _plotstuff_c.plot_index_plot(command, cr, args, baton)
plot_index_plot = _plotstuff_c.plot_index_plot

def plot_index_free(args, baton):
    return _plotstuff_c.plot_index_free(args, baton)
plot_index_free = _plotstuff_c.plot_index_free

def plot_index_describe(p):
    return _plotstuff_c.plot_index_describe(p)
plot_index_describe = _plotstuff_c.plot_index_describe
class plotxy_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotxy_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotxy_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fn"] = _plotstuff_c.plotxy_args_fn_set
    __swig_getmethods__["fn"] = _plotstuff_c.plotxy_args_fn_get
    if _newclass:
        fn = _swig_property(_plotstuff_c.plotxy_args_fn_get, _plotstuff_c.plotxy_args_fn_set)
    __swig_setmethods__["ext"] = _plotstuff_c.plotxy_args_ext_set
    __swig_getmethods__["ext"] = _plotstuff_c.plotxy_args_ext_get
    if _newclass:
        ext = _swig_property(_plotstuff_c.plotxy_args_ext_get, _plotstuff_c.plotxy_args_ext_set)
    __swig_setmethods__["xcol"] = _plotstuff_c.plotxy_args_xcol_set
    __swig_getmethods__["xcol"] = _plotstuff_c.plotxy_args_xcol_get
    if _newclass:
        xcol = _swig_property(_plotstuff_c.plotxy_args_xcol_get, _plotstuff_c.plotxy_args_xcol_set)
    __swig_setmethods__["ycol"] = _plotstuff_c.plotxy_args_ycol_set
    __swig_getmethods__["ycol"] = _plotstuff_c.plotxy_args_ycol_get
    if _newclass:
        ycol = _swig_property(_plotstuff_c.plotxy_args_ycol_get, _plotstuff_c.plotxy_args_ycol_set)
    __swig_setmethods__["xoff"] = _plotstuff_c.plotxy_args_xoff_set
    __swig_getmethods__["xoff"] = _plotstuff_c.plotxy_args_xoff_get
    if _newclass:
        xoff = _swig_property(_plotstuff_c.plotxy_args_xoff_get, _plotstuff_c.plotxy_args_xoff_set)
    __swig_setmethods__["yoff"] = _plotstuff_c.plotxy_args_yoff_set
    __swig_getmethods__["yoff"] = _plotstuff_c.plotxy_args_yoff_get
    if _newclass:
        yoff = _swig_property(_plotstuff_c.plotxy_args_yoff_get, _plotstuff_c.plotxy_args_yoff_set)
    __swig_setmethods__["firstobj"] = _plotstuff_c.plotxy_args_firstobj_set
    __swig_getmethods__["firstobj"] = _plotstuff_c.plotxy_args_firstobj_get
    if _newclass:
        firstobj = _swig_property(_plotstuff_c.plotxy_args_firstobj_get, _plotstuff_c.plotxy_args_firstobj_set)
    __swig_setmethods__["nobjs"] = _plotstuff_c.plotxy_args_nobjs_set
    __swig_getmethods__["nobjs"] = _plotstuff_c.plotxy_args_nobjs_get
    if _newclass:
        nobjs = _swig_property(_plotstuff_c.plotxy_args_nobjs_get, _plotstuff_c.plotxy_args_nobjs_set)
    __swig_setmethods__["scale"] = _plotstuff_c.plotxy_args_scale_set
    __swig_getmethods__["scale"] = _plotstuff_c.plotxy_args_scale_get
    if _newclass:
        scale = _swig_property(_plotstuff_c.plotxy_args_scale_get, _plotstuff_c.plotxy_args_scale_set)
    __swig_setmethods__["xyvals"] = _plotstuff_c.plotxy_args_xyvals_set
    __swig_getmethods__["xyvals"] = _plotstuff_c.plotxy_args_xyvals_get
    if _newclass:
        xyvals = _swig_property(_plotstuff_c.plotxy_args_xyvals_get, _plotstuff_c.plotxy_args_xyvals_set)
    __swig_setmethods__["wcs"] = _plotstuff_c.plotxy_args_wcs_set
    __swig_getmethods__["wcs"] = _plotstuff_c.plotxy_args_wcs_get
    if _newclass:
        wcs = _swig_property(_plotstuff_c.plotxy_args_wcs_get, _plotstuff_c.plotxy_args_wcs_set)

    def __init__(self):
        this = _plotstuff_c.new_plotxy_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotxy_args
    __del__ = lambda self: None
plotxy_args_swigregister = _plotstuff_c.plotxy_args_swigregister
plotxy_args_swigregister(plotxy_args)


def plot_xy_get(pargs):
    return _plotstuff_c.plot_xy_get(pargs)
plot_xy_get = _plotstuff_c.plot_xy_get

def plot_xy_init(args):
    return _plotstuff_c.plot_xy_init(args)
plot_xy_init = _plotstuff_c.plot_xy_init

def plot_xy_setsize(args, xyargs):
    return _plotstuff_c.plot_xy_setsize(args, xyargs)
plot_xy_setsize = _plotstuff_c.plot_xy_setsize

def plot_xy_clear_list(args):
    return _plotstuff_c.plot_xy_clear_list(args)
plot_xy_clear_list = _plotstuff_c.plot_xy_clear_list

def plot_xy_set_xcol(args, col):
    return _plotstuff_c.plot_xy_set_xcol(args, col)
plot_xy_set_xcol = _plotstuff_c.plot_xy_set_xcol

def plot_xy_set_ycol(args, col):
    return _plotstuff_c.plot_xy_set_ycol(args, col)
plot_xy_set_ycol = _plotstuff_c.plot_xy_set_ycol

def plot_xy_set_filename(args, fn):
    return _plotstuff_c.plot_xy_set_filename(args, fn)
plot_xy_set_filename = _plotstuff_c.plot_xy_set_filename

def plot_xy_set_wcs_filename(args, fn, ext):
    return _plotstuff_c.plot_xy_set_wcs_filename(args, fn, ext)
plot_xy_set_wcs_filename = _plotstuff_c.plot_xy_set_wcs_filename

def plot_xy_set_offsets(args, xo, yo):
    return _plotstuff_c.plot_xy_set_offsets(args, xo, yo)
plot_xy_set_offsets = _plotstuff_c.plot_xy_set_offsets

def plot_xy_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_xy_command(command, cmdargs, args, baton)
plot_xy_command = _plotstuff_c.plot_xy_command

def plot_xy_plot(command, cairo, plotargs, baton):
    return _plotstuff_c.plot_xy_plot(command, cairo, plotargs, baton)
plot_xy_plot = _plotstuff_c.plot_xy_plot

def plot_xy_free(args, baton):
    return _plotstuff_c.plot_xy_free(args, baton)
plot_xy_free = _plotstuff_c.plot_xy_free

def plot_xy_vals(args, x, y):
    return _plotstuff_c.plot_xy_vals(args, x, y)
plot_xy_vals = _plotstuff_c.plot_xy_vals

def plot_xy_describe(p):
    return _plotstuff_c.plot_xy_describe(p)
plot_xy_describe = _plotstuff_c.plot_xy_describe
class plotradec_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotradec_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotradec_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fn"] = _plotstuff_c.plotradec_args_fn_set
    __swig_getmethods__["fn"] = _plotstuff_c.plotradec_args_fn_get
    if _newclass:
        fn = _swig_property(_plotstuff_c.plotradec_args_fn_get, _plotstuff_c.plotradec_args_fn_set)
    __swig_setmethods__["ext"] = _plotstuff_c.plotradec_args_ext_set
    __swig_getmethods__["ext"] = _plotstuff_c.plotradec_args_ext_get
    if _newclass:
        ext = _swig_property(_plotstuff_c.plotradec_args_ext_get, _plotstuff_c.plotradec_args_ext_set)
    __swig_setmethods__["racol"] = _plotstuff_c.plotradec_args_racol_set
    __swig_getmethods__["racol"] = _plotstuff_c.plotradec_args_racol_get
    if _newclass:
        racol = _swig_property(_plotstuff_c.plotradec_args_racol_get, _plotstuff_c.plotradec_args_racol_set)
    __swig_setmethods__["deccol"] = _plotstuff_c.plotradec_args_deccol_set
    __swig_getmethods__["deccol"] = _plotstuff_c.plotradec_args_deccol_get
    if _newclass:
        deccol = _swig_property(_plotstuff_c.plotradec_args_deccol_get, _plotstuff_c.plotradec_args_deccol_set)
    __swig_setmethods__["firstobj"] = _plotstuff_c.plotradec_args_firstobj_set
    __swig_getmethods__["firstobj"] = _plotstuff_c.plotradec_args_firstobj_get
    if _newclass:
        firstobj = _swig_property(_plotstuff_c.plotradec_args_firstobj_get, _plotstuff_c.plotradec_args_firstobj_set)
    __swig_setmethods__["nobjs"] = _plotstuff_c.plotradec_args_nobjs_set
    __swig_getmethods__["nobjs"] = _plotstuff_c.plotradec_args_nobjs_get
    if _newclass:
        nobjs = _swig_property(_plotstuff_c.plotradec_args_nobjs_get, _plotstuff_c.plotradec_args_nobjs_set)
    __swig_setmethods__["radecvals"] = _plotstuff_c.plotradec_args_radecvals_set
    __swig_getmethods__["radecvals"] = _plotstuff_c.plotradec_args_radecvals_get
    if _newclass:
        radecvals = _swig_property(_plotstuff_c.plotradec_args_radecvals_get, _plotstuff_c.plotradec_args_radecvals_set)

    def __init__(self):
        this = _plotstuff_c.new_plotradec_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotradec_args
    __del__ = lambda self: None
plotradec_args_swigregister = _plotstuff_c.plotradec_args_swigregister
plotradec_args_swigregister(plotradec_args)


def plot_radec_get(pargs):
    return _plotstuff_c.plot_radec_get(pargs)
plot_radec_get = _plotstuff_c.plot_radec_get

def plot_radec_reset(args):
    return _plotstuff_c.plot_radec_reset(args)
plot_radec_reset = _plotstuff_c.plot_radec_reset

def plot_radec_init(args):
    return _plotstuff_c.plot_radec_init(args)
plot_radec_init = _plotstuff_c.plot_radec_init

def plot_radec_set_racol(args, col):
    return _plotstuff_c.plot_radec_set_racol(args, col)
plot_radec_set_racol = _plotstuff_c.plot_radec_set_racol

def plot_radec_set_deccol(args, col):
    return _plotstuff_c.plot_radec_set_deccol(args, col)
plot_radec_set_deccol = _plotstuff_c.plot_radec_set_deccol

def plot_radec_set_filename(args, fn):
    return _plotstuff_c.plot_radec_set_filename(args, fn)
plot_radec_set_filename = _plotstuff_c.plot_radec_set_filename

def plot_radec_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_radec_command(command, cmdargs, args, baton)
plot_radec_command = _plotstuff_c.plot_radec_command

def plot_radec_count_inbounds(pargs, args):
    return _plotstuff_c.plot_radec_count_inbounds(pargs, args)
plot_radec_count_inbounds = _plotstuff_c.plot_radec_count_inbounds

def plot_radec_plot(command, cairo, plotargs, baton):
    return _plotstuff_c.plot_radec_plot(command, cairo, plotargs, baton)
plot_radec_plot = _plotstuff_c.plot_radec_plot

def plot_radec_free(args, baton):
    return _plotstuff_c.plot_radec_free(args, baton)
plot_radec_free = _plotstuff_c.plot_radec_free

def plot_radec_vals(args, ra, dec):
    return _plotstuff_c.plot_radec_vals(args, ra, dec)
plot_radec_vals = _plotstuff_c.plot_radec_vals

def plot_radec_describe(p):
    return _plotstuff_c.plot_radec_describe(p)
plot_radec_describe = _plotstuff_c.plot_radec_describe
class plotmatch_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotmatch_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotmatch_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matches"] = _plotstuff_c.plotmatch_args_matches_set
    __swig_getmethods__["matches"] = _plotstuff_c.plotmatch_args_matches_get
    if _newclass:
        matches = _swig_property(_plotstuff_c.plotmatch_args_matches_get, _plotstuff_c.plotmatch_args_matches_set)

    def __init__(self):
        this = _plotstuff_c.new_plotmatch_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plotmatch_args
    __del__ = lambda self: None
plotmatch_args_swigregister = _plotstuff_c.plotmatch_args_swigregister
plotmatch_args_swigregister(plotmatch_args)


def plot_match_get(pargs):
    return _plotstuff_c.plot_match_get(pargs)
plot_match_get = _plotstuff_c.plot_match_get

def plot_match_add_match(args, mo):
    return _plotstuff_c.plot_match_add_match(args, mo)
plot_match_add_match = _plotstuff_c.plot_match_add_match

def plot_match_set_filename(args, filename):
    return _plotstuff_c.plot_match_set_filename(args, filename)
plot_match_set_filename = _plotstuff_c.plot_match_set_filename

def plot_match_init(args):
    return _plotstuff_c.plot_match_init(args)
plot_match_init = _plotstuff_c.plot_match_init

def plot_match_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_match_command(command, cmdargs, args, baton)
plot_match_command = _plotstuff_c.plot_match_command

def plot_match_plot(command, cr, args, baton):
    return _plotstuff_c.plot_match_plot(command, cr, args, baton)
plot_match_plot = _plotstuff_c.plot_match_plot

def plot_match_free(args, baton):
    return _plotstuff_c.plot_match_free(args, baton)
plot_match_free = _plotstuff_c.plot_match_free

def plot_match_describe(p):
    return _plotstuff_c.plot_match_describe(p)
plot_match_describe = _plotstuff_c.plot_match_describe
class annotation_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, annotation_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, annotation_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NGC"] = _plotstuff_c.annotation_args_NGC_set
    __swig_getmethods__["NGC"] = _plotstuff_c.annotation_args_NGC_get
    if _newclass:
        NGC = _swig_property(_plotstuff_c.annotation_args_NGC_get, _plotstuff_c.annotation_args_NGC_set)
    __swig_setmethods__["constellations"] = _plotstuff_c.annotation_args_constellations_set
    __swig_getmethods__["constellations"] = _plotstuff_c.annotation_args_constellations_get
    if _newclass:
        constellations = _swig_property(_plotstuff_c.annotation_args_constellations_get, _plotstuff_c.annotation_args_constellations_set)
    __swig_setmethods__["constellation_lines"] = _plotstuff_c.annotation_args_constellation_lines_set
    __swig_getmethods__["constellation_lines"] = _plotstuff_c.annotation_args_constellation_lines_get
    if _newclass:
        constellation_lines = _swig_property(_plotstuff_c.annotation_args_constellation_lines_get, _plotstuff_c.annotation_args_constellation_lines_set)
    __swig_setmethods__["constellation_markers"] = _plotstuff_c.annotation_args_constellation_markers_set
    __swig_getmethods__["constellation_markers"] = _plotstuff_c.annotation_args_constellation_markers_get
    if _newclass:
        constellation_markers = _swig_property(_plotstuff_c.annotation_args_constellation_markers_get, _plotstuff_c.annotation_args_constellation_markers_set)
    __swig_setmethods__["constellation_labels"] = _plotstuff_c.annotation_args_constellation_labels_set
    __swig_getmethods__["constellation_labels"] = _plotstuff_c.annotation_args_constellation_labels_get
    if _newclass:
        constellation_labels = _swig_property(_plotstuff_c.annotation_args_constellation_labels_get, _plotstuff_c.annotation_args_constellation_labels_set)
    __swig_setmethods__["constellation_labels_long"] = _plotstuff_c.annotation_args_constellation_labels_long_set
    __swig_getmethods__["constellation_labels_long"] = _plotstuff_c.annotation_args_constellation_labels_long_get
    if _newclass:
        constellation_labels_long = _swig_property(_plotstuff_c.annotation_args_constellation_labels_long_get, _plotstuff_c.annotation_args_constellation_labels_long_set)
    __swig_setmethods__["constellation_lines_offset"] = _plotstuff_c.annotation_args_constellation_lines_offset_set
    __swig_getmethods__["constellation_lines_offset"] = _plotstuff_c.annotation_args_constellation_lines_offset_get
    if _newclass:
        constellation_lines_offset = _swig_property(_plotstuff_c.annotation_args_constellation_lines_offset_get, _plotstuff_c.annotation_args_constellation_lines_offset_set)
    __swig_setmethods__["constellation_pastel"] = _plotstuff_c.annotation_args_constellation_pastel_set
    __swig_getmethods__["constellation_pastel"] = _plotstuff_c.annotation_args_constellation_pastel_get
    if _newclass:
        constellation_pastel = _swig_property(_plotstuff_c.annotation_args_constellation_pastel_get, _plotstuff_c.annotation_args_constellation_pastel_set)
    __swig_setmethods__["bright"] = _plotstuff_c.annotation_args_bright_set
    __swig_getmethods__["bright"] = _plotstuff_c.annotation_args_bright_get
    if _newclass:
        bright = _swig_property(_plotstuff_c.annotation_args_bright_get, _plotstuff_c.annotation_args_bright_set)
    __swig_setmethods__["bright_labels"] = _plotstuff_c.annotation_args_bright_labels_set
    __swig_getmethods__["bright_labels"] = _plotstuff_c.annotation_args_bright_labels_get
    if _newclass:
        bright_labels = _swig_property(_plotstuff_c.annotation_args_bright_labels_get, _plotstuff_c.annotation_args_bright_labels_set)
    __swig_setmethods__["bright_pastel"] = _plotstuff_c.annotation_args_bright_pastel_set
    __swig_getmethods__["bright_pastel"] = _plotstuff_c.annotation_args_bright_pastel_get
    if _newclass:
        bright_pastel = _swig_property(_plotstuff_c.annotation_args_bright_pastel_get, _plotstuff_c.annotation_args_bright_pastel_set)
    __swig_setmethods__["HD"] = _plotstuff_c.annotation_args_HD_set
    __swig_getmethods__["HD"] = _plotstuff_c.annotation_args_HD_get
    if _newclass:
        HD = _swig_property(_plotstuff_c.annotation_args_HD_get, _plotstuff_c.annotation_args_HD_set)
    __swig_setmethods__["HD_labels"] = _plotstuff_c.annotation_args_HD_labels_set
    __swig_getmethods__["HD_labels"] = _plotstuff_c.annotation_args_HD_labels_get
    if _newclass:
        HD_labels = _swig_property(_plotstuff_c.annotation_args_HD_labels_get, _plotstuff_c.annotation_args_HD_labels_set)
    __swig_setmethods__["ngc_fraction"] = _plotstuff_c.annotation_args_ngc_fraction_set
    __swig_getmethods__["ngc_fraction"] = _plotstuff_c.annotation_args_ngc_fraction_get
    if _newclass:
        ngc_fraction = _swig_property(_plotstuff_c.annotation_args_ngc_fraction_get, _plotstuff_c.annotation_args_ngc_fraction_set)
    __swig_setmethods__["targets"] = _plotstuff_c.annotation_args_targets_set
    __swig_getmethods__["targets"] = _plotstuff_c.annotation_args_targets_get
    if _newclass:
        targets = _swig_property(_plotstuff_c.annotation_args_targets_get, _plotstuff_c.annotation_args_targets_set)
    __swig_setmethods__["hd_catalog"] = _plotstuff_c.annotation_args_hd_catalog_set
    __swig_getmethods__["hd_catalog"] = _plotstuff_c.annotation_args_hd_catalog_get
    if _newclass:
        hd_catalog = _swig_property(_plotstuff_c.annotation_args_hd_catalog_get, _plotstuff_c.annotation_args_hd_catalog_set)

    def add_target(self, ra, dec, name):
        return _plotstuff_c.annotation_args_add_target(self, ra, dec, name)

    def add_named_target(self, name):
        return _plotstuff_c.annotation_args_add_named_target(self, name)

    def clear_targets(self):
        return _plotstuff_c.annotation_args_clear_targets(self)

    def __init__(self):
        this = _plotstuff_c.new_annotation_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_annotation_args
    __del__ = lambda self: None
annotation_args_swigregister = _plotstuff_c.annotation_args_swigregister
annotation_args_swigregister(annotation_args)


def plot_annotations_init(args):
    return _plotstuff_c.plot_annotations_init(args)
plot_annotations_init = _plotstuff_c.plot_annotations_init

def plot_annotations_get(pargs):
    return _plotstuff_c.plot_annotations_get(pargs)
plot_annotations_get = _plotstuff_c.plot_annotations_get

def plot_annotations_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_annotations_command(command, cmdargs, args, baton)
plot_annotations_command = _plotstuff_c.plot_annotations_command

def plot_annotations_plot(command, cr, args, baton):
    return _plotstuff_c.plot_annotations_plot(command, cr, args, baton)
plot_annotations_plot = _plotstuff_c.plot_annotations_plot

def plot_annotations_free(args, baton):
    return _plotstuff_c.plot_annotations_free(args, baton)
plot_annotations_free = _plotstuff_c.plot_annotations_free

def plot_annotations_set_hd_catalog(ann, hdfn):
    return _plotstuff_c.plot_annotations_set_hd_catalog(ann, hdfn)
plot_annotations_set_hd_catalog = _plotstuff_c.plot_annotations_set_hd_catalog

def plot_annotations_add_named_target(ann, target):
    return _plotstuff_c.plot_annotations_add_named_target(ann, target)
plot_annotations_add_named_target = _plotstuff_c.plot_annotations_add_named_target

def plot_annotations_add_target(ann, ra, dec, name):
    return _plotstuff_c.plot_annotations_add_target(ann, ra, dec, name)
plot_annotations_add_target = _plotstuff_c.plot_annotations_add_target

def plot_annotations_clear_targets(ann):
    return _plotstuff_c.plot_annotations_clear_targets(ann)
plot_annotations_clear_targets = _plotstuff_c.plot_annotations_clear_targets

def plot_annotations_describe(p):
    return _plotstuff_c.plot_annotations_describe(p)
plot_annotations_describe = _plotstuff_c.plot_annotations_describe
class plothealpix_args(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plothealpix_args, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plothealpix_args, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nside"] = _plotstuff_c.plothealpix_args_nside_set
    __swig_getmethods__["nside"] = _plotstuff_c.plothealpix_args_nside_get
    if _newclass:
        nside = _swig_property(_plotstuff_c.plothealpix_args_nside_get, _plotstuff_c.plothealpix_args_nside_set)
    __swig_setmethods__["stepsize"] = _plotstuff_c.plothealpix_args_stepsize_set
    __swig_getmethods__["stepsize"] = _plotstuff_c.plothealpix_args_stepsize_get
    if _newclass:
        stepsize = _swig_property(_plotstuff_c.plothealpix_args_stepsize_get, _plotstuff_c.plothealpix_args_stepsize_set)

    def __init__(self):
        this = _plotstuff_c.new_plothealpix_args()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _plotstuff_c.delete_plothealpix_args
    __del__ = lambda self: None
plothealpix_args_swigregister = _plotstuff_c.plothealpix_args_swigregister
plothealpix_args_swigregister(plothealpix_args)


def plot_healpix_get(pargs):
    return _plotstuff_c.plot_healpix_get(pargs)
plot_healpix_get = _plotstuff_c.plot_healpix_get

def plot_healpix_init(args):
    return _plotstuff_c.plot_healpix_init(args)
plot_healpix_init = _plotstuff_c.plot_healpix_init

def plot_healpix_command(command, cmdargs, args, baton):
    return _plotstuff_c.plot_healpix_command(command, cmdargs, args, baton)
plot_healpix_command = _plotstuff_c.plot_healpix_command

def plot_healpix_plot(command, cr, args, baton):
    return _plotstuff_c.plot_healpix_plot(command, cr, args, baton)
plot_healpix_plot = _plotstuff_c.plot_healpix_plot

def plot_healpix_free(args, baton):
    return _plotstuff_c.plot_healpix_free(args, baton)
plot_healpix_free = _plotstuff_c.plot_healpix_free

def plot_healpix_describe(p):
    return _plotstuff_c.plot_healpix_describe(p)
plot_healpix_describe = _plotstuff_c.plot_healpix_describe
CAIRO_OPERATOR_CLEAR = _plotstuff_c.CAIRO_OPERATOR_CLEAR
CAIRO_OPERATOR_SOURCE = _plotstuff_c.CAIRO_OPERATOR_SOURCE
CAIRO_OPERATOR_OVER = _plotstuff_c.CAIRO_OPERATOR_OVER
CAIRO_OPERATOR_IN = _plotstuff_c.CAIRO_OPERATOR_IN
CAIRO_OPERATOR_OUT = _plotstuff_c.CAIRO_OPERATOR_OUT
CAIRO_OPERATOR_ATOP = _plotstuff_c.CAIRO_OPERATOR_ATOP
CAIRO_OPERATOR_DEST = _plotstuff_c.CAIRO_OPERATOR_DEST
CAIRO_OPERATOR_DEST_OVER = _plotstuff_c.CAIRO_OPERATOR_DEST_OVER
CAIRO_OPERATOR_DEST_IN = _plotstuff_c.CAIRO_OPERATOR_DEST_IN
CAIRO_OPERATOR_DEST_OUT = _plotstuff_c.CAIRO_OPERATOR_DEST_OUT
CAIRO_OPERATOR_DEST_ATOP = _plotstuff_c.CAIRO_OPERATOR_DEST_ATOP
CAIRO_OPERATOR_XOR = _plotstuff_c.CAIRO_OPERATOR_XOR
CAIRO_OPERATOR_ADD = _plotstuff_c.CAIRO_OPERATOR_ADD
CAIRO_OPERATOR_SATURATE = _plotstuff_c.CAIRO_OPERATOR_SATURATE

def image_debug(img, W, H):
    return _plotstuff_c.image_debug(img, W, H)
image_debug = _plotstuff_c.image_debug

def image_add(img, W, H, val):
    return _plotstuff_c.image_add(img, W, H, val)
image_add = _plotstuff_c.image_add

def image_weighted_smooth(img, W, H, weight, sigma):
    return _plotstuff_c.image_weighted_smooth(img, W, H, weight, sigma)
image_weighted_smooth = _plotstuff_c.image_weighted_smooth

def plotoutline_setattr(self, name, val):
    if name == 'wcs_file':
        if type(val) is tuple:
            (fn,ext) = val
        else:
            fn = val
            ext = 0
        plot_outline_set_wcs_file(self, fn, ext)
        return
    self.__swig__setattr__(name, val)

plotoutline_args.__swig__setattr__ = plotoutline_args.__setattr__
plotoutline_args.__setattr__ = plotoutline_setattr


def plotimage_set_image_from_numpy(self, img):
    rtn = self._set_image_from_numpy(img)
    if rtn:
        raise RuntimeError('set_image_from_numpy() failed')
plotimage_args.set_image_from_numpy = plotimage_set_image_from_numpy

# This file is compatible with both classic and new-style classes.


